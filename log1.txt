FFFFFFFFFFFFFFF.........FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF.FF.FFFFFFF..FFFFFF.....FFFFF.FFFFF........................FFFF..............FFFFF.FFF.......F.......................F...FFFFFFF.............F.....F...*..............................*.....F..........................FFFF...........................................................................FFFFFFFFFFFFFFFFFFFFFFFF...FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFNot validating feed because no validator (feedvalidator in python) is installed
....Not validating feed because no validator (feedvalidator in python) is installed
...Not validating feed because no validator (feedvalidator in python) is installed
...Not validating feed because no validator (feedvalidator in python) is installed
...Not validating feed because no validator (feedvalidator in python) is installed
....Not validating feed because no validator (feedvalidator in python) is installed
..FFFFF.Not validating feed because no validator (feedvalidator in python) is installed
................FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFNot validating feed because no validator (feedvalidator in python) is installed
.................Not validating feed because no validator (feedvalidator in python) is installed
.Not validating feed because no validator (feedvalidator in python) is installed
.................................................FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF.FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF............................FFFF*FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF.FFFFFFFFFFFFFF.FFFFFFF......FFFFF......FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF....FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF................

Pending:
  Article test_triggers_are_dependent
    # Needs a fix for Rails ticket #5105: has_many: Dependent deleting does not work with STI
    # ./spec/models/article_spec.rb:286
  Article with tags lets the tag collection survive a load-save cycle
    # Not yet implemented
    # ./spec/models/article_spec.rb:241
  ThemeController disabled_test_javascript
    # Not yet implemented
    # ./spec/controllers/theme_controller_spec.rb:35

Failures:

  1) SidebarHelper#render_sidebars with an invalid sidebar should return a friendly error message
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/sidebar_helper_spec.rb:13:in `block (2 levels) in <top (required)>'

  2) SidebarHelper#render_sidebars with a valid sidebar should render the sidebar
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/sidebar_helper_spec.rb:13:in `block (2 levels) in <top (required)>'

  3) ApplicationHelper#render_flash should render empty string if no flash
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  4) ApplicationHelper#render_flash should render a good render if only one notice
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  5) ApplicationHelper#render_flash should render the notice and error flash
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  6) ApplicationHelper#link_to_permalink for a simple ascii-only permalink 
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  7) ApplicationHelper#link_to_permalink for a simple ascii-only permalink 
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  8) ApplicationHelper#link_to_permalink for a multibyte permalink escapes the multibyte characters
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  9) ApplicationHelper#display_date should return date with format %d/%m/%y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  10) ApplicationHelper#display_date should return date with format %m/%m/%y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  11) ApplicationHelper#display_date should return date with format %d %b %Y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  12) ApplicationHelper#display_date should return date with format %b %d %Y
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  13) ApplicationHelper#display_date should return time with format %I:%M%p
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  14) ApplicationHelper#display_date should return time with format %H:%M
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  15) ApplicationHelper#display_date should return time with format %Hh%M
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/helpers/application_helper_spec.rb:5:in `block (2 levels) in <top (required)>'

  16) Comment should have good default filter
     Failure/Error: Factory(:blog, :comment_text_filter => Factory(:markdown))
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:230:in `block (2 levels) in <top (required)>'

  17) Comment#permalink_url should render permalink to comment in public part
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:17:in `block (3 levels) in <top (required)>'

  18) Comment#edit_url should get a url where edit comment in admin
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:32:in `block (3 levels) in <top (required)>'

  19) Comment#delete_url should get the delete url of comment in admin part
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:40:in `block (3 levels) in <top (required)>'

  20) Comment#save should save good comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  21) Comment#save should save spam comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  22) Comment#save should not save in invalid article
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  23) Comment#save should change old comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  24) Comment#save should save a valid comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  25) Comment#save should not save with article not allow comment
     Failure/Error: before(:each) { Factory(:blog, :sp_article_auto_close => 300) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:47:in `block (3 levels) in <top (required)>'

  26) Comment#create should create comment
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  27) Comment#create preserves urls starting with https://
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  28) Comment#create preserves urls starting with http://
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  29) Comment#create prepends http:// to urls without protocol
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:95:in `block (3 levels) in <top (required)>'

  30) Comment#spam? should reject spam rbl
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:125:in `block (3 levels) in <top (required)>'

  31) Comment#spam? should not define spam a comment rbl with lookup succeeds
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:125:in `block (3 levels) in <top (required)>'

  32) Comment#spam? should reject spam with uri limit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:125:in `block (3 levels) in <top (required)>'

  33) Comment reject xss should reject with filter ''
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  34) Comment reject xss should reject with filter 'textile'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  35) Comment reject xss should reject with filter 'markdown'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  36) Comment reject xss should reject with filter 'smartypants'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  37) Comment reject xss should reject with filter 'markdown smartypants'
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:166:in `block (3 levels) in <top (required)>'

  38) Comment change state should becomes withdraw
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:187:in `block (3 levels) in <top (required)>'

  39) Comment change state should becomes not published in article if withdraw
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:187:in `block (3 levels) in <top (required)>'

  40) Comment change state should becomes confirmed if withdrawn
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:187:in `block (3 levels) in <top (required)>'

  41) Comment with feedback moderation enabled should save comment as presumably spam
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:237:in `block (3 levels) in <top (required)>'

  42) Comment with feedback moderation enabled should save comment as confirmed ham
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/comment_spec.rb:237:in `block (3 levels) in <top (required)>'

  43) FeedbackStates from Test::Unit test_ham_all_the_way
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  44) FeedbackStates from Test::Unit test_spam_all_the_way
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  45) FeedbackStates from Test::Unit test_presumed_spam_marked_as_ham
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  46) FeedbackStates from Test::Unit test_presumed_ham_marked_as_spam
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/content_state/feedback_states_spec.rb:5:in `block (2 levels) in <top (required)>'

  47) Trackback With the various trackback filters loaded and DNS mocked out appropriately Incomplete trackbacks should not be accepted
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  48) Trackback With the various trackback filters loaded and DNS mocked out appropriately A valid trackback should be accepted
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  49) Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks with a spammy link in the excerpt should be rejected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  50) Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks with a spammy source url should be rejected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  51) Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks from a spammy ip address should be rejected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/trackback_spec.rb:6:in `block (2 levels) in <top (required)>'

  52) Sidebar#find_all_visible returns only the sidebar with active position
     Failure/Error: sidebars.size.should == 1
       expected: 1
            got: 61 (using ==)
     # ./spec/models/sidebar_spec.rb:18:in `block (3 levels) in <top (required)>'

  53) Sidebar#find with an invalid sidebar in the database skips the invalid active sidebar
     Failure/Error: sidebars.size.should == 1
       expected: 1
            got: 6 (using ==)
     # ./spec/models/sidebar_spec.rb:33:in `block (3 levels) in <top (required)>'

  54) Given a post which references a pingback enabled article Pingback sent to url found in referenced header
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:16:in `block (2 levels) in <top (required)>'

  55) Given a post which references a pingback enabled article Pingback sent to url found in referenced body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:23:in `block (2 levels) in <top (required)>'

  56) Given a post which references a pingback enabled article Pingback sent when new article is saved
     Failure/Error: Factory(:blog, :send_outbound_pings => 1)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:35:in `block (2 levels) in <top (required)>'

  57) An article links to another article, which contains a trackback URL Trackback URL is detected and pinged
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:76:in `block (2 levels) in <top (required)>'

  58) An article links to another article, which contains a trackback URL sends a trackback without html tag in excerpt
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:76:in `block (2 levels) in <top (required)>'

  59) An article links to another article, which contains a trackback URL sends a trackback without markdown tag in excerpt
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:76:in `block (2 levels) in <top (required)>'

  60) Given a remote site to notify, eg technorati we can ping them correctly
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_spec.rb:150:in `block (2 levels) in <top (required)>'

  61) Testing redirects a new published page gets a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:14:in `block (2 levels) in <top (required)>'

  62) Testing redirects a new unpublished page should not get a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:22:in `block (2 levels) in <top (required)>'

  63) Testing redirects Changin a published article permalink url should only change the to redirection
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:29:in `block (2 levels) in <top (required)>'

  64) Given the fixture :first_page Pages cannot have the same name
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:46:in `block (2 levels) in <top (required)>'

  65) Given the fixture :first_page should give a sanitized title
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:46:in `block (2 levels) in <top (required)>'

  66) Given the fixture :first_page#permalink_url 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:46:in `block (2 levels) in <top (required)>'

  67) Given a valid page default filter should be fetched from the blog
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/page_spec.rb:123:in `block (2 levels) in <top (required)>'

  68) PostType post types are unique
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  69) PostType Given a new post type should give a valid post type
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  70) PostType Given a new post type should have a sanitized permalink
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  71) PostType Given a new post type should have a sanitized permalink with a
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/post_type_spec.rb:6:in `block (2 levels) in <top (required)>'

  72) Given the default theme theme should be typographic
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  73) Given the default theme theme description should be correct
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  74) Given the default theme theme_from_path should find the correct theme
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  75) Given the default theme#search_theme_path finds the right things 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  76) Given the default theme find_all finds all the installed themes
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/theme_spec.rb:12:in `block (2 levels) in <top (required)>'

  77) The first blog should be the only blog allowed
     Failure/Error: @blog = Factory.create :blog
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/blog_spec.rb:53:in `block (2 levels) in <top (required)>'

  78) The default blog should pick up updates after a cache clear
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/blog_spec.rb:63:in `block (2 levels) in <top (required)>'

  79) Given no blogs, a new default blog should be valid after filling the title
     Failure/Error: @blog.should be_valid
       expected valid? to return true, got false
     # ./spec/models/blog_spec.rb:79:in `block (2 levels) in <top (required)>'

  80) Given no blogs, a new default blog should be valid without filling the title
     Failure/Error: @blog.should be_valid
       expected valid? to return true, got false
     # ./spec/models/blog_spec.rb:84:in `block (2 levels) in <top (required)>'

  81) Valid permalink in blog should be valid with only %title%
     Failure/Error: @blog.should be_valid
       expected valid? to return true, got false
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  82) Valid permalink in blog should be valid with only %title%.html
     Failure/Error: @blog.should be_valid
       expected valid? to return true, got false
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  83) Valid permalink in blog should be valid with only /hello/all/%year%/%title%
     Failure/Error: @blog.should be_valid
       expected valid? to return true, got false
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  84) Valid permalink in blog should be valid with only atom/%title%.html
     Failure/Error: @blog.should be_valid
       expected valid? to return true, got false
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  85) Valid permalink in blog should be valid with only ok/rss/%title%.html
     Failure/Error: @blog.should be_valid
       expected valid? to return true, got false
     # ./spec/models/blog_spec.rb:114:in `block (3 levels) in <top (required)>'

  86) Ping::Pinger with Test::Unit test_pingback_url_nil
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_pinger_spec.rb:5:in `block (2 levels) in <top (required)>'

  87) Ping::Pinger with Test::Unit test_pingback_url_from_body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_pinger_spec.rb:5:in `block (2 levels) in <top (required)>'

  88) Ping::Pinger with Test::Unit test_pingback_url
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/ping_pinger_spec.rb:5:in `block (2 levels) in <top (required)>'

  89) User With the contents and users fixtures loaded The various article finders work appropriately
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/user_spec.rb:45:in `block (3 levels) in <top (required)>'

  90) User#permalink_url 
     Failure/Error: before(:each) { Factory(:blog, :base_url => 'http://myblog.net/') }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/user_spec.rb:219:in `block (3 levels) in <top (required)>'

  91) Tag we can Tag.get by name
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  92) Tag tags are unique
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  93) Tag display names with spaces can be found by dash joined name
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  94) Tag articles can be tagged
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  95) Tag find_all_with_article_counters finds 2 tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  96) Tag permalink_url should be of form /tag/<name>
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  97) Tag#published_articles should return only published articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/tag_spec.rb:5:in `block (2 levels) in <top (required)>'

  98) Article test_create
     Failure/Error: a.categories << Category.find(Factory(:category).id)
     ActiveRecord::RecordInvalid:
       Validation failed: Name has already been taken
     # ./spec/models/article_spec.rb:93:in `block (2 levels) in <top (required)>'

  99) Article test_find_published
     Failure/Error: assert_equal 1, @articles.size
     MiniTest::Assertion:
       <1> expected but was
       <3>.
     # (eval):2:in `assert_equal'
     # ./spec/models/article_spec.rb:256:in `block (2 levels) in <top (required)>'

  100) Article#search with several words and no result should be empty
     Failure/Error: @articles.should be_empty
       expected empty? to return true, got false
     # ./spec/models/article_spec.rb:427:in `block (4 levels) in <top (required)>'

  101) Category should know published_articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:19:in `block (2 levels) in <top (required)>'

  102) Category empty permalink should be converted
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:28:in `block (2 levels) in <top (required)>'

  103) Category category with permalink should not have permalink generated
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:34:in `block (2 levels) in <top (required)>'

  104) Category permalink 
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/category_spec.rb:43:in `block (3 levels) in <top (required)>'

  105) Given a published article An unchanged article does not invalidate the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  106) Given a published article changing the body smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  107) Given a published article withdrawing it smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  108) Given a published article destroying it smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  109) Given a published article withdrawing, then destroying it smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:5:in `block (2 levels) in <top (required)>'

  110) Given an unpublished article publishing smashes the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:38:in `block (2 levels) in <top (required)>'

  111) Given an unpublished article changing it keeps the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:38:in `block (2 levels) in <top (required)>'

  112) Given an unpublished article destroying it keeps the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:38:in `block (2 levels) in <top (required)>'

  113) Given an unpublished spammy comment changing it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:60:in `block (2 levels) in <top (required)>'

  114) Given an unpublished spammy comment publishing it does alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:60:in `block (2 levels) in <top (required)>'

  115) Given an unpublished spammy comment destroying it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:60:in `block (2 levels) in <top (required)>'

  116) Given a published comment changing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:88:in `block (2 levels) in <top (required)>'

  117) Given a published comment unpublishing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:88:in `block (2 levels) in <top (required)>'

  118) Given a published comment destroying it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:88:in `block (2 levels) in <top (required)>'

  119) Given an unpublished spammy trackback changing it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:111:in `block (2 levels) in <top (required)>'

  120) Given an unpublished spammy trackback publishing it does alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:111:in `block (2 levels) in <top (required)>'

  121) Given an unpublished spammy trackback destroying it does not alter the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:111:in `block (2 levels) in <top (required)>'

  122) Given a published trackback changing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:137:in `block (2 levels) in <top (required)>'

  123) Given a published trackback unpublishing it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:137:in `block (2 levels) in <top (required)>'

  124) Given a published trackback destroying it destroys the cache
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/cache_support_spec.rb:137:in `block (2 levels) in <top (required)>'

  125) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_new_article_should_be_open_if_auto_close_is_zero
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  126) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_old_article_should_be_open_if_auto_close_is_zero
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  127) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_new_article_should_be_open_if_auto_close_is_thirty
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  128) CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_old_article_should_be_closed_if_auto_close_is_thirty
     Failure/Error: @blog = Factory(:blog,
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/article_closing_spec.rb:9:in `block (2 levels) in <top (required)>'

  129) With the list of available filters#filter text by name
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  130) With the list of available filters#available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  131) With the list of available filters#available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  132) With the list of available filters#available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  133) With the list of available filters#available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  134) With the list of available filters#available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  135) With the list of available filters#available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  136) With the list of available filters#available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  137) With the list of available filters#available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  138) With the list of available filters#available_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  139) With the list of available filters#macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  140) With the list of available filters#macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  141) With the list of available filters#macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  142) With the list of available filters#macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  143) With the list of available filters#macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  144) With the list of available filters#macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  145) With the list of available filters#macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  146) With the list of available filters#macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  147) With the list of available filters#macro_filters 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  148) With the list of available filters#filter_text unknown
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  149) With the list of available filters#filter_text smartypants
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  150) With the list of available filters#filter_text markdown
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  151) With the list of available filters#filter_text filterchain
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  152) With the list of available filters#filter_text test_code_plus_markup_chain
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  153) With the list of available filters#filter_text specific typo tags flickr should show with default settings
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  154) With the list of available filters#filter_text specific typo tags flickr should use default image size
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  155) With the list of available filters#filter_text specific typo tags flickr should use caption
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  156) With the list of available filters#filter_text specific typo tags flickr broken_flickr_link
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  157) With the list of available filters#filter_text code textfilter single line should made nothin if no args
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  158) With the list of available filters#filter_text code textfilter single line should parse ruby lang
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  159) With the list of available filters#filter_text code textfilter single line should parse ruby and xml in same sentence but not in same place
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  160) With the list of available filters#filter_text code textfilter multiline should render ruby
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  161) With the list of available filters#filter_text lightbox should work
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  162) With the list of available filters#filter_text lightbox shoudl use default thumb image size
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  163) With the list of available filters#filter_text lightbox should use default display image size
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  164) With the list of available filters#filter_text lightbox should work with caption
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  165) With the list of available filters#filter_text combining a post-macro with markdown correctly interprets the macro
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  166) With the list of available filters#filter_text combining a post-macro with markdown correctly interprets the macro
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/models/text_filter_spec.rb:7:in `block (2 levels) in <top (required)>'

  167) layouts/default.html.erb with theme dirtylicious when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  168) layouts/default.html.erb with theme dirtylicious when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  169) layouts/default.html.erb with theme standard_issue when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  170) layouts/default.html.erb with theme standard_issue when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  171) layouts/default.html.erb with theme true-red when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  172) layouts/default.html.erb with theme true-red when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  173) layouts/default.html.erb with theme bootstrap when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  174) layouts/default.html.erb with theme bootstrap when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  175) layouts/default.html.erb with theme scribbish when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  176) layouts/default.html.erb with theme scribbish when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  177) layouts/default.html.erb with theme typographic when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  178) layouts/default.html.erb with theme typographic when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  179) layouts/default.html.erb with theme true-blue-3 when use_meta_keyword set to true renders assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:21:in `block (5 levels) in <top (required)>'

  180) layouts/default.html.erb with theme true-blue-3 when use_meta_keyword set to false does not render assigned keywords
     Failure/Error: @blog = Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/layouts/default_spec.rb:32:in `block (5 levels) in <top (required)>'

  181) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  182) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  183) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  184) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  185) First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:46
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  186) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  187) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  188) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  189) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  190) Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:54
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  191) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  192) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  193) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  194) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  195) Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:62
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  196) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  197) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  198) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  199) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  200) Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:70
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  201) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  202) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  203) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  204) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  205) XSS1 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:80
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  206) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  207) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  208) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  209) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  210) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:88
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  211) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  212) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  213) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  214) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  215) XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:95
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  216) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  217) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  218) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  219) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  220) Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:103
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  221) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  222) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  223) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  224) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  225) Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitization" called from ./spec/views/comments/html_sanitization_spec.rb:111
     # ./spec/views/comments/html_sanitization_spec.rb:5:in `block (2 levels) in <top (required)>'

  226) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  227) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  228) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  229) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  230) First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:163
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  231) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  232) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  233) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  234) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  235) Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:171
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  236) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  237) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  238) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  239) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  240) Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:179
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  241) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  242) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  243) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  244) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  245) Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:187
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  246) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  247) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  248) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  249) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  250) XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:197
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  251) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  252) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  253) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  254) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  255) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:205
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  256) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  257) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  258) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  259) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  260) XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:212
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  261) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  262) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  263) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  264) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  265) Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:220
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  266) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  267) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  268) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  269) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  270) Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "CommentSanitizationWithDofollow" called from ./spec/views/comments/html_sanitization_spec.rb:228
     # ./spec/views/comments/html_sanitization_spec.rb:120:in `block (2 levels) in <top (required)>'

  271) articles/feedback_atom_feed.atom.builder with one trackback should render a valid feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  272) articles/feedback_atom_feed.atom.builder with one trackback should render an Atom feed with one item
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  273) articles/feedback_atom_feed.atom.builder with one trackback the trackback entry should have all the required attributes
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  274) articles/feedback_atom_feed.atom.builder with a comment with problematic characters should render a valid feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  275) articles/feedback_atom_feed.atom.builder with a comment with problematic characters should render an Atom feed with one item
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/feedback_atom_feed_spec.rb:5:in `block (2 levels) in <top (required)>'

  276) articles/index.html.erb without a theme normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  277) articles/index.html.erb without a theme normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  278) articles/index.html.erb without a theme normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  279) articles/index.html.erb without a theme normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  280) articles/index.html.erb without a theme normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  281) articles/index.html.erb without a theme without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  282) articles/index.html.erb without a theme without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  283) articles/index.html.erb without a theme when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  284) articles/index.html.erb without a theme when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  285) articles/index.html.erb with theme dirtylicious normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  286) articles/index.html.erb with theme dirtylicious normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  287) articles/index.html.erb with theme dirtylicious normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  288) articles/index.html.erb with theme dirtylicious normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  289) articles/index.html.erb with theme dirtylicious normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  290) articles/index.html.erb with theme dirtylicious without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  291) articles/index.html.erb with theme dirtylicious without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  292) articles/index.html.erb with theme dirtylicious when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  293) articles/index.html.erb with theme dirtylicious when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  294) articles/index.html.erb with theme standard_issue normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  295) articles/index.html.erb with theme standard_issue normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  296) articles/index.html.erb with theme standard_issue normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  297) articles/index.html.erb with theme standard_issue normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  298) articles/index.html.erb with theme standard_issue normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  299) articles/index.html.erb with theme standard_issue without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  300) articles/index.html.erb with theme standard_issue without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  301) articles/index.html.erb with theme standard_issue when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  302) articles/index.html.erb with theme standard_issue when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  303) articles/index.html.erb with theme true-red normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  304) articles/index.html.erb with theme true-red normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  305) articles/index.html.erb with theme true-red normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  306) articles/index.html.erb with theme true-red normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  307) articles/index.html.erb with theme true-red normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  308) articles/index.html.erb with theme true-red without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  309) articles/index.html.erb with theme true-red without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  310) articles/index.html.erb with theme true-red when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  311) articles/index.html.erb with theme true-red when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  312) articles/index.html.erb with theme bootstrap normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  313) articles/index.html.erb with theme bootstrap normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  314) articles/index.html.erb with theme bootstrap normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  315) articles/index.html.erb with theme bootstrap normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  316) articles/index.html.erb with theme bootstrap normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  317) articles/index.html.erb with theme bootstrap without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  318) articles/index.html.erb with theme bootstrap without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  319) articles/index.html.erb with theme bootstrap when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  320) articles/index.html.erb with theme bootstrap when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  321) articles/index.html.erb with theme scribbish normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  322) articles/index.html.erb with theme scribbish normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  323) articles/index.html.erb with theme scribbish normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  324) articles/index.html.erb with theme scribbish normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  325) articles/index.html.erb with theme scribbish normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  326) articles/index.html.erb with theme scribbish without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  327) articles/index.html.erb with theme scribbish without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  328) articles/index.html.erb with theme scribbish when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  329) articles/index.html.erb with theme scribbish when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  330) articles/index.html.erb with theme typographic normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  331) articles/index.html.erb with theme typographic normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  332) articles/index.html.erb with theme typographic normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  333) articles/index.html.erb with theme typographic normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  334) articles/index.html.erb with theme typographic normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  335) articles/index.html.erb with theme typographic without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  336) articles/index.html.erb with theme typographic without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  337) articles/index.html.erb with theme typographic when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  338) articles/index.html.erb with theme typographic when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  339) articles/index.html.erb with theme true-blue-3 normally should not have too many paragraph marks around body
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  340) articles/index.html.erb with theme true-blue-3 normally should not have div nested inside p
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  341) articles/index.html.erb with theme true-blue-3 normally should not have extra escaped html
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  342) articles/index.html.erb with theme true-blue-3 normally renders the regular article partial twice
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  343) articles/index.html.erb with theme true-blue-3 normally does not render any password forms
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:12:in `block (5 levels) in <top (required)>'

  344) articles/index.html.erb with theme true-blue-3 without search, on page 2 should not have pagination link to page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  345) articles/index.html.erb with theme true-blue-3 without search, on page 2 should have pagination link to page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:50:in `block (5 levels) in <top (required)>'

  346) articles/index.html.erb with theme true-blue-3 when on page 2 of search should not have pagination link to search page 2
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  347) articles/index.html.erb with theme true-blue-3 when on page 2 of search should have pagination link to search page 1
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/views/articles/index_spec.rb:72:in `block (5 levels) in <top (required)>'

  348) BackendController when called through Blogger API test_blogger_delete_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  349) BackendController when called through Blogger API test_blogger_get_users_blogs
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  350) BackendController when called through Blogger API test_blogger_get_user_info
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  351) BackendController when called through Blogger API test_blogger_new_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  352) BackendController when called through Blogger API test_blogger_new_post_no_title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  353) BackendController when called through Blogger API test_blogger_new_post_with_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  354) BackendController when called through Blogger API test_blogger_new_post_with_non_existing_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  355) BackendController when called through Blogger API test_blogger_fail_authentication
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  356) BackendController when called through the MetaWeblog API test_meta_weblog_get_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  357) BackendController when called through the MetaWeblog API test_meta_weblog_get_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  358) BackendController when called through the MetaWeblog API test_meta_weblog_get_recent_posts
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  359) BackendController when called through the MetaWeblog API test_meta_weblog_delete_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  360) BackendController when called through the MetaWeblog API test_meta_weblog_new_post_fails
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  361) BackendController when called through the MetaWeblog API test_meta_weblog_new_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  362) BackendController when called through the MetaWeblog API test_meta_weblog_new_unpublished_post_with_blank_creation_date
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  363) BackendController when called through the MetaWeblog API should set categories if specified in new post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  364) BackendController when called through the MetaWeblog API test_meta_weblog_edit_unpublished_post_with_old_creation_date
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  365) BackendController when called through the MetaWeblog API test_meta_weblog_new_media_object
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  366) BackendController when called through the MetaWeblog API test_meta_weblog_fail_authentication
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  367) BackendController when called through the MetaWeblog API test_meta_weblog_should_preserve_date_time_on_roundtrip_edit
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  368) BackendController when called through the MetaWeblog API when editing a post test_meta_weblog_edit_post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  369) BackendController when called through the MetaWeblog API when editing a post should set categories if specified
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  370) BackendController when called through the Movable Type API test_mt_get_category_list
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  371) BackendController when called through the Movable Type API test_mt_get_post_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  372) BackendController when called through the Movable Type API test_mt_get_recent_post_titles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  373) BackendController when called through the Movable Type API test_mt_set_post_categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  374) BackendController when called through the Movable Type API test_mt_supported_text_filters
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  375) BackendController when called through the Movable Type API test_mt_supported_methods
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  376) BackendController when called through the Movable Type API test_mt_get_trackback_pings
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  377) BackendController when called through the Movable Type API should publish post
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  378) BackendController when called through the Movable Type API test_mt_fail_authentication
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/backend_controller_spec.rb:21:in `block (2 levels) in <top (required)>'

  379) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  380) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  381) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  382) TagsController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  383) TagsController /index if :index template exists should render :index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  384) TagsController showing a single tag with some articles should be successful
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  385) TagsController showing a single tag with some articles should retrieve the correct set of articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  386) TagsController showing a single tag with some articles should render :show by default
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  387) TagsController showing a single tag with some articles should fall back to rendering articles/index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  388) TagsController showing a single tag with some articles should set the page title to "Tag foo"
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  389) TagsController showing a single tag with some articles should render the atom feed for /articles/tag/foo.atom
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  390) TagsController showing a single tag with some articles should render the rss feed for /articles/tag/foo.rss
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  391) TagsController showing a single tag without articles should redirect to main page
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:36:in `block (2 levels) in <top (required)>'

  392) TagsController showing tag "foo" should have good rss feed link in head
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:108:in `block (2 levels) in <top (required)>'

  393) TagsController showing tag "foo" should have good atom feed link in head
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:108:in `block (2 levels) in <top (required)>'

  394) TagsController showing tag "foo" should have a canonical URL
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:108:in `block (2 levels) in <top (required)>'

  395) TagsController showing a non-existant tag should redirect to main page
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:130:in `block (2 levels) in <top (required)>'

  396) TagsController password protected article article in tag should be password protected
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:142:in `block (2 levels) in <top (required)>'

  397) TagsController SEO Options should have rel nofollow
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  398) TagsController SEO Options should not have rel nofollow
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  399) TagsController SEO Options should not have meta keywords with deactivated option and no blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  400) TagsController SEO Options should not have meta keywords with deactivated option and blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  401) TagsController SEO Options should not have meta keywords with activated option and no blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  402) TagsController SEO Options should have meta keywords with activated option and blog keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/tags_controller_spec.rb:156:in `block (2 levels) in <top (required)>'

  403) ArticlesController should redirect category to /categories
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  404) ArticlesController should redirect tag to /tags
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  405) ArticlesController archives
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  406) ArticlesController index action should be render template index
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  407) ArticlesController index action should show some articles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  408) ArticlesController index action should have good link feed rss
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  409) ArticlesController index action should have good link feed atom
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  410) ArticlesController index action should have a canonical url
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  411) ArticlesController index action should have googd title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  412) ArticlesController index action should have a custom tracking field
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  413) ArticlesController#search action should render feed rss by search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  414) ArticlesController#search action should render feed atom by search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  415) ArticlesController#search action search with empty result
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  416) ArticlesController#search action a valid search should render template search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  417) ArticlesController#search action a valid search should assigns articles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  418) ArticlesController#search action a valid search should have good feed rss link
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  419) ArticlesController#search action a valid search should have good feed atom link
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  420) ArticlesController#search action a valid search should have a canonical url
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  421) ArticlesController#search action a valid search should have a good title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  422) ArticlesController#search action a valid search should have content markdown interpret and without html tag
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  423) ArticlesController#search action a valid search should have a custom tracking field
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  424) ArticlesController#livesearch action with a query with several words should be valid
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  425) ArticlesController#livesearch action with a query with several words should render without layout
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  426) ArticlesController#livesearch action with a query with several words should render template live_search
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  427) ArticlesController#livesearch action with a query with several words should not have h3 tag
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  428) ArticlesController#livesearch action with a query with several words should assign @search the search string
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  429) ArticlesController index for a month should render template index
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  430) ArticlesController index for a month should contain some articles
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  431) ArticlesController index for a month should have a canonical url
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  432) ArticlesController index for a month should have a good title
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  433) ArticlesController index for a month should have a custom tracking field
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:16:in `block (2 levels) in <top (required)>'

  434) ArticlesController nousers redirects to signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:237:in `block (2 levels) in <top (required)>'

  435) ArticlesController feeds /articles.atom => an atom feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  436) ArticlesController feeds /articles.rss => an RSS 2.0 feed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  437) ArticlesController feeds atom feed for archive should be valid
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  438) ArticlesController feeds RSS feed for archive should be valid
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:252:in `block (2 levels) in <top (required)>'

  439) ArticlesController the index should ignore the HTTP Accept: header
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:297:in `block (2 levels) in <top (required)>'

  440) ArticlesController previewing with non logged user should redirect to login
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  441) ArticlesController previewing with logged user should render template /articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  442) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/dirtylicious/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  443) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/standard_issue/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  444) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/true-red/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  445) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/bootstrap/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  446) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/scribbish/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  447) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/typographic/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  448) ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/true-blue-3/views/articles/read
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  449) ArticlesController previewing with logged user should assigns article define with id
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  450) ArticlesController previewing with logged user should assigns last article with id like parent_id
     Failure/Error: before(:each) { @blog = Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:310:in `block (2 levels) in <top (required)>'

  451) ArticlesController redirecting should get good article with utf8 slug
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:447:in `block (2 levels) in <top (required)>'

  452) ArticlesController redirecting should get good article with pre-escaped utf8 slug using unescaped slug
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:456:in `block (2 levels) in <top (required)>'

  453) ArticlesController redirecting with explicit redirects should redirect from known URL
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:365:in `block (3 levels) in <top (required)>'

  454) ArticlesController redirecting with explicit redirects should not redirect from unknown URL
     Failure/Error: :profile => Factory(:profile_admin, :label => Profile::ADMIN),
     ActiveRecord::RecordInvalid:
       Validation failed: Label has already been taken
     # ./spec/controllers/articles_controller_spec.rb:386:in `block (3 levels) in <top (required)>'

  455) ArticlesController redirecting with explicit redirects and non-empty relative_url_root should redirect
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:404:in `block (4 levels) in <top (required)>'

  456) ArticlesController redirecting with explicit redirects and non-empty relative_url_root should redirect if to_path includes relative_url_root
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:404:in `block (4 levels) in <top (required)>'

  457) ArticlesController redirecting with explicit redirects and non-empty relative_url_root should ignore the blog base_url if the to_path is a full uri
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:404:in `block (4 levels) in <top (required)>'

  458) ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:465:in `block (3 levels) in <top (required)>'

  459) ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article with url_root
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/blog")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:476:in `block (3 levels) in <top (required)>'

  460) ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article with articles in url_root
     Failure/Error: b = Factory(:blog, :base_url => "http://test.host/aaa/articles/bbb")
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:487:in `block (3 levels) in <top (required)>'

  461) ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find '.htmlsecond-blog-article'
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  462) ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find 'second-blog-article.html.html'
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  463) ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find 'second-blog-article.html/foo'
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  464) ArticlesController redirecting with permalink_format like %title%.html accessing legacy URLs should redirect from default URL format
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  465) ArticlesController redirecting with permalink_format like %title%.html accessing legacy URLs should redirect from old-style URL format with "articles" part
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  466) ArticlesController redirecting with permalink_format like %title%.html accessing an article should render template read to article
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  467) ArticlesController redirecting with permalink_format like %title%.html accessing an article should assign article1 to @article
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  468) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have good rss feed link
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  469) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have good atom feed link
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  470) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have a canonical url
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  471) ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have a good title
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  472) ArticlesController redirecting with permalink_format like %title%.html rendering as atom feed should render feedback atom feed
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  473) ArticlesController redirecting with permalink_format like %title%.html rendering as rss feed should render rss20 partial
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:501:in `block (3 levels) in <top (required)>'

  474) ArticlesController redirecting with a format containing a fixed component should find the article if the url matches all components
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:607:in `block (3 levels) in <top (required)>'

  475) ArticlesController redirecting with a format containing a fixed component should not find the article if the url does not match the fixed component
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:607:in `block (3 levels) in <top (required)>'

  476) ArticlesController redirecting with a custom format with several fixed parts and several variables should find the article if the url matches all components
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/bar/%year%/%month%/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:625:in `block (3 levels) in <top (required)>'

  477) ArticlesController redirecting with a custom format with several fixed parts and several variables should not find the article if the url only matches some components
     Failure/Error: b = Factory(:blog, :permalink_format => '/foo/bar/%year%/%month%/%title%')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:625:in `block (3 levels) in <top (required)>'

  478) ArticlesController password protected article alone should be password protected
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:660:in `block (2 levels) in <top (required)>'

  479) ArticlesController password protected#check_password shows article when given correct password
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:660:in `block (2 levels) in <top (required)>'

  480) ArticlesController password protected#check_password shows password form when given incorrect password
     Failure/Error: b = Factory(:blog, :permalink_format => '/%title%.html')
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:660:in `block (2 levels) in <top (required)>'

  481) ArticlesController assigned keywords article with categories should have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  482) ArticlesController assigned keywords article with neither categories nor tags should not have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  483) ArticlesController assigned keywords index without option and no blog keywords should not have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  484) ArticlesController assigned keywords index without option but with blog keywords should have meta keywords
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/articles_controller_spec.rb:684:in `block (2 levels) in <top (required)>'

  485) ThemeController test_stylesheets
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  486) ThemeController test_images
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  487) ThemeController test_malicious_path
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  488) ThemeController test_view_theming
     Failure/Error: before(:each) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/theme_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  489) Admin::ResourcesController test_destroy_image with POST
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  490) Admin::ResourcesController test_upload
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  491) Admin::ResourcesController test_index should render index template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  492) Admin::ResourcesController test_destroy_image with get should render template destroy
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  493) Admin::ResourcesController test_destroy_image with get should have a valid file
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/resources_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  494) Admin::SettingsController#index should render index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  495) Admin::SettingsController write action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  496) Admin::SettingsController feedback action should be sucess
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  497) Admin::SettingsController redirect action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  498) Admin::SettingsController update action should success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  499) Admin::SettingsController update action should not save blog with bad permalink format
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/settings_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  500) Admin::PagesController test_create
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  501) Admin::PagesController test_update
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  502) Admin::PagesController test_destroy
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  503) Admin::PagesController should create a published page with a redirect
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  504) Admin::PagesController should create an unpublished page without a redirect
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  505) Admin::PagesController should create a page published in the future without a redirect
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  506) Admin::PagesController#index should response success
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  507) Admin::PagesController#index should response success with :page args
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  508) Admin::PagesController new without page params should render template new and has a page object
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  509) Admin::PagesController new without page params should assign to current user
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  510) Admin::PagesController new without page params should have a text filter
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  511) Admin::PagesController test_edit should render edit template
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  512) Admin::PagesController insert_editor action should render _simple_editor
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  513) Admin::PagesController insert_editor action should render _visual_editor
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  514) Admin::PagesController insert_editor action should render _visual_editor even if editor param is set to unknow editor
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/pages_controller_spec.rb:8:in `block (2 levels) in <top (required)>'

  515) Admin::TagsController index action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  516) Admin::TagsController index action should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  517) Admin::TagsController edit action should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  518) Admin::TagsController edit action should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  519) Admin::TagsController edit action should assigns value :tag
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  520) Admin::TagsController destroy action with GET should be success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  521) Admin::TagsController destroy action with GET should have an id in the form destination
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  522) Admin::TagsController destroy action with GET should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  523) Admin::TagsController destroy action with GET should assigns value :tag
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  524) Admin::TagsController destroy action with POST should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  525) Admin::TagsController destroy action with POST should have one less tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  526) Admin::TagsController update action should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  527) Admin::TagsController update action should update tag
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  528) Admin::TagsController update action should create a redirect from the old to the new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/tags_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  529) Admin::FeedbackController logged in admin user destroy action should destroy feedback from article doesn't own
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  530) Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should destroy feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:56
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  531) Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should redirect to feedback from article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:56
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  532) Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should not destroy feedback in get request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:56
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  533) Admin::FeedbackController logged in admin user index action should success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  534) Admin::FeedbackController logged in admin user index action should view only unconfirmed feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  535) Admin::FeedbackController logged in admin user index action should view only spam feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  536) Admin::FeedbackController logged in admin user index action should view unconfirmed_spam
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  537) Admin::FeedbackController logged in admin user index action should view presumed_spam
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  538) Admin::FeedbackController logged in admin user index action should view presumed_ham
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  539) Admin::FeedbackController logged in admin user index action should get page 1 if page params empty
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  540) Admin::FeedbackController logged in admin user article action should see all feedback on one article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  541) Admin::FeedbackController logged in admin user article action should see only spam feedback on one article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  542) Admin::FeedbackController logged in admin user article action should see only ham feedback on one article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  543) Admin::FeedbackController logged in admin user article action should redirect_to index if bad article id
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  544) Admin::FeedbackController logged in admin user create action by get access should raise ActiveRecordNotFound if article doesn't exist
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  545) Admin::FeedbackController logged in admin user create action by get access should not create comment
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  546) Admin::FeedbackController logged in admin user create action by post access should raise ActiveRecordNotFound if article doesn't exist
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  547) Admin::FeedbackController logged in admin user create action by post access should create comment
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  548) Admin::FeedbackController logged in admin user create action by post access should create comment mark as ham
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  549) Admin::FeedbackController logged in admin user edit action should render edit form
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  550) Admin::FeedbackController logged in admin user update action should update comment if post request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  551) Admin::FeedbackController logged in admin user update action should not  update comment if get request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:38:in `block (3 levels) in <top (required)>'

  552) Admin::FeedbackController publisher access destroy action should not destroy feedback doesn't own
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  553) Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should destroy feedback
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:296
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  554) Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should redirect to feedback from article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:296
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  555) Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should not destroy feedback in get request
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy feedback with feedback from own article" called from ./spec/controllers/admin/feedback_controller_spec.rb:296
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  556) Admin::FeedbackController publisher access edit action should not edit comment no own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  557) Admin::FeedbackController publisher access edit action should edit comment if own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  558) Admin::FeedbackController publisher access update action should update comment if own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  559) Admin::FeedbackController publisher access update action should not update comment if not own article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  560) Admin::FeedbackController publisher access#bulkops action should redirect to action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/feedback_controller_spec.rb:278:in `block (3 levels) in <top (required)>'

  561) Admin::ContentController insert_editor action should render _simple_editor
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  562) Admin::ContentController insert_editor action should render _visual_editor
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  563) Admin::ContentController insert_editor action should render _visual_editor even if editor param is set to unknow editor
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  564) Admin::ContentController with admin connection it should behave like index action should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  565) Admin::ContentController with admin connection it should behave like index action should see all published in index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  566) Admin::ContentController with admin connection it should behave like index action should restrict only by searchstring
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  567) Admin::ContentController with admin connection it should behave like index action should restrict by searchstring and published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  568) Admin::ContentController with admin connection it should behave like index action should restrict to drafts
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  569) Admin::ContentController with admin connection it should behave like index action should restrict to publication pending articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  570) Admin::ContentController with admin connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  571) Admin::ContentController with admin connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  572) Admin::ContentController with admin connection it should behave like index action should restrict to published articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  573) Admin::ContentController with admin connection it should behave like index action should fallback to default behavior
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:479
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  574) Admin::ContentController with admin connection it should behave like new action should create article with no comments
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  575) Admin::ContentController with admin connection it should behave like new action should create a published article with a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  576) Admin::ContentController with admin connection it should behave like new action should create a draft article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  577) Admin::ContentController with admin connection it should behave like new action should create an unpublished article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  578) Admin::ContentController with admin connection it should behave like new action should create an article published in the future without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  579) Admin::ContentController with admin connection it should behave like new action should create article with no pings
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  580) Admin::ContentController with admin connection it should behave like new action should create an article linked to the current user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  581) Admin::ContentController with admin connection it should behave like new action should create new published article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  582) Admin::ContentController with admin connection it should behave like new action should redirect to show
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  583) Admin::ContentController with admin connection it should behave like new action should send notifications on create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  584) Admin::ContentController with admin connection it should behave like new action should create an article in a category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  585) Admin::ContentController with admin connection it should behave like new action should create an article with tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  586) Admin::ContentController with admin connection it should behave like new action should create article in future
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  587) Admin::ContentController with admin connection it should behave like new action should correctly interpret time zone in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  588) Admin::ContentController with admin connection it should behave like new action should respect "GMT+0000 (UTC)" in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  589) Admin::ContentController with admin connection it should behave like new action should create a filtered article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  590) Admin::ContentController with admin connection it should behave like new action GET renders the 'new' template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  591) Admin::ContentController with admin connection it should behave like new action GET correctly converts multi-word tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  592) Admin::ContentController with admin connection it should behave like new action publishing a published article with an autosaved draft updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  593) Admin::ContentController with admin connection it should behave like new action publishing a published article with an autosaved draft deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  594) Admin::ContentController with admin connection it should behave like new action publishing a draft copy of a published article updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  595) Admin::ContentController with admin connection it should behave like new action publishing a draft copy of a published article deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  596) Admin::ContentController with admin connection it should behave like new action saving a published article as draft leaves the original published
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  597) Admin::ContentController with admin connection it should behave like new action saving a published article as draft leaves the original as is
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  598) Admin::ContentController with admin connection it should behave like new action saving a published article as draft redirects to the index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  599) Admin::ContentController with admin connection it should behave like new action saving a published article as draft creates a draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  600) Admin::ContentController with admin connection it should behave like new action with an unrelated draft in the database saving new article as draft leaves the original draft in existence
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:480
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  601) Admin::ContentController with admin connection it should behave like destroy action should_not destroy article by get
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:481
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  602) Admin::ContentController with admin connection it should behave like destroy action should destroy article by post
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:481
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  603) Admin::ContentController with admin connection it should behave like autosave action first time for a new article should save new article with draft status and no parent article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  604) Admin::ContentController with admin connection it should behave like autosave action second time for a new article should save the same article with draft status and no parent article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  605) Admin::ContentController with admin connection it should behave like autosave action for a published article should create a draft article with proper attributes and existing article as a parent
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  606) Admin::ContentController with admin connection it should behave like autosave action for a published article should not create another draft article with parent_id if article has already a draft associated
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  607) Admin::ContentController with admin connection it should behave like autosave action for a published article should create a draft with the same permalink even if the title has changed
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  608) Admin::ContentController with admin connection it should behave like autosave action with an unrelated draft in the database leaves the original draft in existence
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "autosave action" called from ./spec/controllers/admin/content_controller_spec.rb:482
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  609) Admin::ContentController with admin connection edit action should edit article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  610) Admin::ContentController with admin connection edit action should update article by edit action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  611) Admin::ContentController with admin connection edit action should allow updating body_and_extended
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  612) Admin::ContentController with admin connection edit action should delete draft about this article if update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  613) Admin::ContentController with admin connection edit action should delete all draft about this article if update not happen but why not
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  614) Admin::ContentController with admin connection resource_add action should add resource
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  615) Admin::ContentController with admin connection resource_remove action should remove resource
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  616) Admin::ContentController with admin connection auto_complete_for_article_keywords action should return foo for keywords fo
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  617) Admin::ContentController with admin connection auto_complete_for_article_keywords action should return nothing for hello
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  618) Admin::ContentController with admin connection auto_complete_for_article_keywords action should return bar and bazz for ba keyword
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:469:in `block (3 levels) in <top (required)>'

  619) Admin::ContentController with publisher connection it should behave like index action should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  620) Admin::ContentController with publisher connection it should behave like index action should see all published in index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  621) Admin::ContentController with publisher connection it should behave like index action should restrict only by searchstring
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  622) Admin::ContentController with publisher connection it should behave like index action should restrict by searchstring and published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  623) Admin::ContentController with publisher connection it should behave like index action should restrict to drafts
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  624) Admin::ContentController with publisher connection it should behave like index action should restrict to publication pending articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  625) Admin::ContentController with publisher connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  626) Admin::ContentController with publisher connection it should behave like index action should restrict to withdrawn articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  627) Admin::ContentController with publisher connection it should behave like index action should restrict to published articles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  628) Admin::ContentController with publisher connection it should behave like index action should fallback to default behavior
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "index action" called from ./spec/controllers/admin/content_controller_spec.rb:621
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  629) Admin::ContentController with publisher connection it should behave like new action should create article with no comments
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  630) Admin::ContentController with publisher connection it should behave like new action should create a published article with a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  631) Admin::ContentController with publisher connection it should behave like new action should create a draft article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  632) Admin::ContentController with publisher connection it should behave like new action should create an unpublished article without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  633) Admin::ContentController with publisher connection it should behave like new action should create an article published in the future without a redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  634) Admin::ContentController with publisher connection it should behave like new action should create article with no pings
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  635) Admin::ContentController with publisher connection it should behave like new action should create an article linked to the current user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  636) Admin::ContentController with publisher connection it should behave like new action should create new published article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  637) Admin::ContentController with publisher connection it should behave like new action should redirect to show
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  638) Admin::ContentController with publisher connection it should behave like new action should send notifications on create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  639) Admin::ContentController with publisher connection it should behave like new action should create an article in a category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  640) Admin::ContentController with publisher connection it should behave like new action should create an article with tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  641) Admin::ContentController with publisher connection it should behave like new action should create article in future
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  642) Admin::ContentController with publisher connection it should behave like new action should correctly interpret time zone in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  643) Admin::ContentController with publisher connection it should behave like new action should respect "GMT+0000 (UTC)" in :published_at
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  644) Admin::ContentController with publisher connection it should behave like new action should create a filtered article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  645) Admin::ContentController with publisher connection it should behave like new action GET renders the 'new' template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  646) Admin::ContentController with publisher connection it should behave like new action GET correctly converts multi-word tags
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  647) Admin::ContentController with publisher connection it should behave like new action publishing a published article with an autosaved draft updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  648) Admin::ContentController with publisher connection it should behave like new action publishing a published article with an autosaved draft deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  649) Admin::ContentController with publisher connection it should behave like new action publishing a draft copy of a published article updates the original
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  650) Admin::ContentController with publisher connection it should behave like new action publishing a draft copy of a published article deletes the draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  651) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft leaves the original published
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  652) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft leaves the original as is
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  653) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft redirects to the index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  654) Admin::ContentController with publisher connection it should behave like new action saving a published article as draft creates a draft
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  655) Admin::ContentController with publisher connection it should behave like new action with an unrelated draft in the database saving new article as draft leaves the original draft in existence
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "new action" called from ./spec/controllers/admin/content_controller_spec.rb:622
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  656) Admin::ContentController with publisher connection it should behave like destroy action should_not destroy article by get
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:623
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  657) Admin::ContentController with publisher connection it should behave like destroy action should destroy article by post
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "destroy action" called from ./spec/controllers/admin/content_controller_spec.rb:623
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  658) Admin::ContentController with publisher connection edit action should redirect if edit article doesn't his
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  659) Admin::ContentController with publisher connection edit action should edit article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  660) Admin::ContentController with publisher connection edit action should update article by edit action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  661) Admin::ContentController with publisher connection destroy action can be access should redirect when want destroy article
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/content_controller_spec.rb:615:in `block (3 levels) in <top (required)>'

  662) Admin::UsersController rough port of the old functional test  when you are admin test_index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  663) Admin::UsersController rough port of the old functional test  when you are admin test_new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  664) Admin::UsersController rough port of the old functional test  when you are admin test_destroy
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  665) Admin::UsersController rough port of the old functional test  when you are admin#EDIT action with POST request should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  666) Admin::UsersController rough port of the old functional test  when you are admin#EDIT action with GET request with no id params it should behave like edit admin render should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:55
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  667) Admin::UsersController rough port of the old functional test  when you are admin#EDIT action with GET request with no id params it should behave like edit admin render should assigns tobi user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:55
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  668) Admin::UsersController rough port of the old functional test  when you are admin#EDIT action with GET request with id params it should behave like edit admin render should render template edit
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:62
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  669) Admin::UsersController rough port of the old functional test  when you are admin#EDIT action with GET request with id params it should behave like edit admin render should assigns tobi user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     Shared Example Group: "edit admin render" called from ./spec/controllers/admin/users_controller_spec.rb:62
     # ./spec/controllers/admin/users_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  670) Admin::UsersController rough port of the old functional test when you are not admin don't see the list of user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:86:in `block (3 levels) in <top (required)>'

  671) Admin::UsersController rough port of the old functional test when you are not admin EDIT Action try update another user should redirect to login
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:86:in `block (3 levels) in <top (required)>'

  672) Admin::UsersController rough port of the old functional test when you are not admin EDIT Action try update another user should not change user profile
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/users_controller_spec.rb:86:in `block (3 levels) in <top (required)>'

  673) Admin::RedirectsController test_create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  674) Admin::RedirectsController test_create with empty from path
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  675) Admin::RedirectsController test_update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  676) Admin::RedirectsController#index should display index with redirects
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  677) Admin::RedirectsController#edit should render new template with valid redirect
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  678) Admin::RedirectsController test_destroy with GET should render destroy template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  679) Admin::RedirectsController test_destroy with POST should redirect to index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  680) Admin::RedirectsController test_destroy with POST should have no more redirects
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/redirects_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  681) Admin::CacheController test_index should render template index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/cache_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  682) Admin::ProfilesController#index should render index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/profiles_controller_spec.rb:7:in `block (3 levels) in <top (required)>'

  683) Admin::ProfilesController successful POST to index redirects to profile page
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/profiles_controller_spec.rb:20:in `block (3 levels) in <top (required)>'

  684) Admin::TextfiltersController macro help action should render success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/textfilters_controller_spec.rb:8:in `block (3 levels) in <top (required)>'

  685) Admin::CategoriesController test_index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  686) Admin::CategoriesController test_update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  687) Admin::CategoriesController test_destroy with POST
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  688) Admin::CategoriesController test_edit should render template new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  689) Admin::CategoriesController test_edit should have valid category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  690) Admin::CategoriesController test_destroy with GET should render destroy template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/categories_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  691) Admin::SeoController#index should render index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  692) Admin::SeoController#permalinks should render permalinks
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  693) Admin::SeoController#titles should render titles
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  694) Admin::SeoController update action should success
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  695) Admin::SeoController update action should not save blog with bad permalink format
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/seo_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  696) Admin::SidebarController rendering test_index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/sidebar_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  697) Admin::DashboardController test index should render the index template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/dashboard_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  698) Admin::PostTypesController index shoudld redirect to new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  699) Admin::PostTypesController test_create
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  700) Admin::PostTypesController test_destroy with POST
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  701) Admin::PostTypesController test_new should render template new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  702) Admin::PostTypesController test_edit should render template new
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  703) Admin::PostTypesController test_edit test_update
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  704) Admin::PostTypesController test_destroy with GET should render destroy template
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/post_types_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

  705) Admin::ThemesController redirects to :index after the :switchto action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/themes_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  706) Admin::ThemesController returns succes for the :preview action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/themes_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  707) Admin::ThemesController test index assigns @themes for the :index action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/admin/themes_controller_spec.rb:7:in `block (2 levels) in <top (required)>'

  708) CategoriesController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  709) CategoriesController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  710) CategoriesController /index normally 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  711) CategoriesController /index normally when rendered 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  712) CategoriesController /index if :index template exists should render :index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  713) CategoriesController#show should be successful
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  714) CategoriesController#show should render :show by default
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  715) CategoriesController#show should fall back to rendering articles/index
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  716) CategoriesController#show should render personal when template exists
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  717) CategoriesController#show should show only published articles
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  718) CategoriesController#show should set the page title to "Category Personal"
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  719) CategoriesController#show should render the atom feed for /articles/category/personal.atom
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  720) CategoriesController#show should render the rss feed for /articles/category/personal.rss
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  721) CategoriesController#show when rendered should have a canonical URL
     Failure/Error: blog = Factory(:blog, :base_url => "http://myblog.net", :theme => "typographic",
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:43:in `block (2 levels) in <top (required)>'

  722) CategoriesController empty category life-on-mars should redirect to home when the category is empty
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:136:in `block (2 levels) in <top (required)>'

  723) CategoriesController password protected article should be password protected when shown in category
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:148:in `block (2 levels) in <top (required)>'

  724) CategoriesController SEO Options category without meta keywords and activated options (use_meta_keyword ON) should not have meta keywords
     Failure/Error: Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:164:in `block (2 levels) in <top (required)>'

  725) CategoriesController SEO Options category with keywords and activated option (use_meta_keyword ON) should have meta keywords
     Failure/Error: Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:172:in `block (2 levels) in <top (required)>'

  726) CategoriesController SEO Options category with meta keywords and deactivated options (use_meta_keyword off) should not have meta keywords
     Failure/Error: Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:177:in `block (2 levels) in <top (required)>'

  727) CategoriesController SEO Options with unindex_categories (set ON), should have rel nofollow
     Failure/Error: Factory(:blog, :unindex_categories => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:182:in `block (2 levels) in <top (required)>'

  728) CategoriesController SEO Options without unindex_categories (set OFF), should not have rel nofollow
     Failure/Error: Factory(:blog, :unindex_categories => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/categories_controller_spec.rb:187:in `block (2 levels) in <top (required)>'

  729) GroupingController should set meta robots to noindex follow when tag controller and unindex_tags options is true
     Failure/Error: Factory(:blog, :unindex_tags => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:7:in `block (3 levels) in <top (required)>'

  730) GroupingController should set meta robots to noindex follow when category controller and unindex_categories optinos is true
     Failure/Error: Factory(:blog, :unindex_categories => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:12:in `block (3 levels) in <top (required)>'

  731) GroupingController should set meta robots to noindex follow when page params not blank and unindex_tags and unindex_categories are set to false
     Failure/Error: Factory(:blog, :unindex_categories => false, :unindex_tags => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:17:in `block (3 levels) in <top (required)>'

  732) GroupingController should not set meta robots to noindex follow when tag controller and unindex_tags options is false and page params nil
     Failure/Error: Factory(:blog, :unindex_tags => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:24:in `block (3 levels) in <top (required)>'

  733) GroupingController should not set meta robots to noindex follow when categoriy controller and unindex_categories options is false and page params nil
     Failure/Error: Factory(:blog, :unindex_categories => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/grouping_controller_spec.rb:29:in `block (3 levels) in <top (required)>'

  734) SetupController when a blog is configured and has some users GET setup 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/setup_controller_spec.rb:62:in `block (4 levels) in <top (required)>'

  735) SetupController when a blog is configured and has some users POST setup 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/setup_controller_spec.rb:71:in `block (4 levels) in <top (required)>'

  736) SetupController when a blog is configured and has some users POST setup should not initialize blog and users
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/setup_controller_spec.rb:71:in `block (4 levels) in <top (required)>'

  737) AuthorsController#show as html renders the :show template
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  738) AuthorsController#show as html assigns author
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  739) AuthorsController#show as html assigns articles as published articles
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  740) AuthorsController#show as html when rendered has a link to the rss feed
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  741) AuthorsController#show as html when rendered has a link to the atom feed
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  742) AuthorsController#show as an atom feed assigns articles as published articles
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  743) AuthorsController#show as an atom feed renders the atom template
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  744) AuthorsController#show as an atom feed does not render layout
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  745) AuthorsController#show as an rss feed assigns articles as published articles
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  746) AuthorsController#show as an rss feed renders the rss template
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  747) AuthorsController#show as an rss feed does not render layout
     Failure/Error: let!(:blog) { Factory(:blog) }
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:5:in `block (3 levels) in <top (required)>'

  748) AuthorsController SEO options should never have meta keywords with deactivated option
     Failure/Error: Factory(:blog, :use_meta_keyword => false)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:84:in `block (2 levels) in <top (required)>'

  749) AuthorsController SEO options should never have meta keywords with deactivated option
     Failure/Error: Factory(:blog, :use_meta_keyword => true)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/authors_controller_spec.rb:91:in `block (2 levels) in <top (required)>'

  750) AccountsController A successful login with 'Remember me' checked should not cause password to change
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:6:in `block (3 levels) in <top (required)>'

  751) AccountsController A successfully authenticated login session gets a user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  752) AccountsController A successfully authenticated login sets typo_user_profile cookie
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  753) AccountsController A successfully authenticated login redirects to /bogus/location
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  754) AccountsController A successfully authenticated login redirects to /admin if no return
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  755) AccountsController A successfully authenticated login redirects to /admin if no return and you are logged in
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  756) AccountsController A successfully authenticated login should redirect to signup if no users
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:16:in `block (3 levels) in <top (required)>'

  757) AccountsController User is inactive no user id goes in the session
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  758) AccountsController User is inactive login should == "inactive"
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  759) AccountsController User is inactive typo_user_profile cookie should be blank
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  760) AccountsController User is inactive should render login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:61:in `block (3 levels) in <top (required)>'

  761) AccountsController Login with nil user and password should render login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:94:in `block (3 levels) in <top (required)>'

  762) AccountsController Login gets the wrong password no user in goes in the session
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  763) AccountsController Login gets the wrong password login should == "bob"
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  764) AccountsController Login gets the wrong password typo_user_profile cookie should be blank
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  765) AccountsController Login gets the wrong password should render login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:110:in `block (3 levels) in <top (required)>'

  766) AccountsController GET /index should redirect to login
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:142:in `block (3 levels) in <top (required)>'

  767) AccountsController GET /index should redirect to signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:149:in `block (3 levels) in <top (required)>'

  768) AccountsController GET /login should render action :login
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:158:in `block (3 levels) in <top (required)>'

  769) AccountsController GET /login with 0 existing users should render action :signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:168:in `block (3 levels) in <top (required)>'

  770) AccountsController GET /login with 0 existing users should render :signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:168:in `block (3 levels) in <top (required)>'

  771) AccountsController with >0 existing user and allow_signup = 0 GET signup should redirect to login
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  772) AccountsController with >0 existing user and allow_signup = 0 POST signup without allow_signup should redirect to login
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:186:in `block (3 levels) in <top (required)>'

  773) AccountsController with > 0 existing user and allow_signup = 1 GET signup with allow_signup should redirect to login
     Failure/Error: @blog = Factory(:blog, :allow_signup => 1)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:207:in `block (3 levels) in <top (required)>'

  774) AccountsController with > 0 existing user and allow_signup = 1 POST signup with allow_signup should redirect to login
     Failure/Error: @blog = Factory(:blog, :allow_signup => 1)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:207:in `block (3 levels) in <top (required)>'

  775) AccountsController GET signup with 0 existing users sets @user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:228:in `block (3 levels) in <top (required)>'

  776) AccountsController GET signup with 0 existing users renders action signup
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:228:in `block (3 levels) in <top (required)>'

  777) AccountsController POST signup with 0 existing users creates and saves a user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:289:in `block (3 levels) in <top (required)>'

  778) AccountsController POST signup with 0 existing users redirects to /account/confirm
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:289:in `block (3 levels) in <top (required)>'

  779) AccountsController POST signup with 0 existing users session gets a user
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:289:in `block (3 levels) in <top (required)>'

  780) AccountsController User is logged in trying to log in once again redirects to admin/dashboard/index
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  781) AccountsController User is logged in when logging out deletes the session[:user_id]
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  782) AccountsController User is logged in when logging out deletes the session[:user]
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  783) AccountsController User is logged in when logging out redirects to the login action
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  784) AccountsController User is logged in when logging out deletes cookies containing credentials
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:326:in `block (3 levels) in <top (required)>'

  785) AccountsController when user has lost their password when GET 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  786) AccountsController when user has lost their password when a known login or email is POSTed 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  787) AccountsController when user has lost their password when an unknown login or email is POSTed 
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  788) AccountsController when user has lost their password when an unknown login or email is POSTed should display an error
     Failure/Error: Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/accounts_controller_spec.rb:369:in `block (3 levels) in <top (required)>'

  789) CommentsController#create should redirect to the article
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  790) CommentsController#create Basic comment creation should assign the new comment to @comment
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  791) CommentsController#create Basic comment creation should assign the article to @article
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  792) CommentsController#create Basic comment creation should save the comment
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  793) CommentsController#create Basic comment creation should set the author
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  794) CommentsController#create Basic comment creation should set an author cookie
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  795) CommentsController#create Basic comment creation should set a gravatar_id cookie
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  796) CommentsController#create Basic comment creation should set a url cookie
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  797) CommentsController AJAX creation should render the comment partial
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  798) CommentsController#index scoped index GET 2007/10/11/slug/comments should redirect to /2007/10/11/slug#comments
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  799) CommentsController#index without format should be successful
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  800) CommentsController#index without format should not bother fetching any comments 
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  801) CommentsController#index with :format => 'atom' without article is succesful
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  802) CommentsController#index with :format => 'atom' without article passes the comments to the template
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  803) CommentsController#index with :format => 'atom' without article should return an atom feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  804) CommentsController#index with :format => 'atom' with an article should return an atom feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  805) CommentsController#index with :format => 'rss' without article is succesful
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  806) CommentsController#index with :format => 'rss' without article passes the comments to the template
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  807) CommentsController#index with :format => 'rss' without article should return an rss feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

  808) CommentsController#index with :format => 'rss' with article should return an rss feed
     Failure/Error: @blog = Factory(:blog)
     ActiveRecord::RecordInvalid:
       Validation failed: There can only be one...
     # ./spec/controllers/comments_controller_spec.rb:5:in `block (2 levels) in <top (required)>'

Finished in 18.89 seconds
1228 examples, 808 failures, 3 pending

Failed examples:

rspec ./spec/helpers/sidebar_helper_spec.rb:45 # SidebarHelper#render_sidebars with an invalid sidebar should return a friendly error message
rspec ./spec/helpers/sidebar_helper_spec.rb:55 # SidebarHelper#render_sidebars with a valid sidebar should render the sidebar
rspec ./spec/helpers/application_helper_spec.rb:7 # ApplicationHelper#render_flash should render empty string if no flash
rspec ./spec/helpers/application_helper_spec.rb:11 # ApplicationHelper#render_flash should render a good render if only one notice
rspec ./spec/helpers/application_helper_spec.rb:16 # ApplicationHelper#render_flash should render the notice and error flash
rspec ./spec/helpers/application_helper_spec.rb:26 # ApplicationHelper#link_to_permalink for a simple ascii-only permalink 
rspec ./spec/helpers/application_helper_spec.rb:27 # ApplicationHelper#link_to_permalink for a simple ascii-only permalink 
rspec ./spec/helpers/application_helper_spec.rb:32 # ApplicationHelper#link_to_permalink for a multibyte permalink escapes the multibyte characters
rspec ./spec/helpers/application_helper_spec.rb:44 # ApplicationHelper#display_date should return date with format %d/%m/%y
rspec ./spec/helpers/application_helper_spec.rb:44 # ApplicationHelper#display_date should return date with format %m/%m/%y
rspec ./spec/helpers/application_helper_spec.rb:44 # ApplicationHelper#display_date should return date with format %d %b %Y
rspec ./spec/helpers/application_helper_spec.rb:44 # ApplicationHelper#display_date should return date with format %b %d %Y
rspec ./spec/helpers/application_helper_spec.rb:51 # ApplicationHelper#display_date should return time with format %I:%M%p
rspec ./spec/helpers/application_helper_spec.rb:51 # ApplicationHelper#display_date should return time with format %H:%M
rspec ./spec/helpers/application_helper_spec.rb:51 # ApplicationHelper#display_date should return time with format %Hh%M
rspec ./spec/models/comment_spec.rb:229 # Comment should have good default filter
rspec ./spec/models/comment_spec.rb:25 # Comment#permalink_url should render permalink to comment in public part
rspec ./spec/models/comment_spec.rb:31 # Comment#edit_url should get a url where edit comment in admin
rspec ./spec/models/comment_spec.rb:39 # Comment#delete_url should get the delete url of comment in admin part
rspec ./spec/models/comment_spec.rb:48 # Comment#save should save good comment
rspec ./spec/models/comment_spec.rb:54 # Comment#save should save spam comment
rspec ./spec/models/comment_spec.rb:60 # Comment#save should not save in invalid article
rspec ./spec/models/comment_spec.rb:69 # Comment#save should change old comment
rspec ./spec/models/comment_spec.rb:75 # Comment#save should save a valid comment
rspec ./spec/models/comment_spec.rb:81 # Comment#save should not save with article not allow comment
rspec ./spec/models/comment_spec.rb:98 # Comment#create should create comment
rspec ./spec/models/comment_spec.rb:104 # Comment#create preserves urls starting with https://
rspec ./spec/models/comment_spec.rb:110 # Comment#create preserves urls starting with http://
rspec ./spec/models/comment_spec.rb:116 # Comment#create prepends http:// to urls without protocol
rspec ./spec/models/comment_spec.rb:128 # Comment#spam? should reject spam rbl
rspec ./spec/models/comment_spec.rb:135 # Comment#spam? should not define spam a comment rbl with lookup succeeds
rspec ./spec/models/comment_spec.rb:143 # Comment#spam? should reject spam with uri limit
rspec ./spec/models/comment_spec.rb:174 # Comment reject xss should reject with filter ''
rspec ./spec/models/comment_spec.rb:174 # Comment reject xss should reject with filter 'textile'
rspec ./spec/models/comment_spec.rb:174 # Comment reject xss should reject with filter 'markdown'
rspec ./spec/models/comment_spec.rb:174 # Comment reject xss should reject with filter 'smartypants'
rspec ./spec/models/comment_spec.rb:174 # Comment reject xss should reject with filter 'markdown smartypants'
rspec ./spec/models/comment_spec.rb:190 # Comment change state should becomes withdraw
rspec ./spec/models/comment_spec.rb:202 # Comment change state should becomes not published in article if withdraw
rspec ./spec/models/comment_spec.rb:220 # Comment change state should becomes confirmed if withdrawn
rspec ./spec/models/comment_spec.rb:242 # Comment with feedback moderation enabled should save comment as presumably spam
rspec ./spec/models/comment_spec.rb:255 # Comment with feedback moderation enabled should save comment as confirmed ham
rspec ./spec/models/content_state/feedback_states_spec.rb:10 # FeedbackStates from Test::Unit test_ham_all_the_way
rspec ./spec/models/content_state/feedback_states_spec.rb:32 # FeedbackStates from Test::Unit test_spam_all_the_way
rspec ./spec/models/content_state/feedback_states_spec.rb:55 # FeedbackStates from Test::Unit test_presumed_spam_marked_as_ham
rspec ./spec/models/content_state/feedback_states_spec.rb:63 # FeedbackStates from Test::Unit test_presumed_ham_marked_as_spam
rspec ./spec/models/trackback_spec.rb:13 # Trackback With the various trackback filters loaded and DNS mocked out appropriately Incomplete trackbacks should not be accepted
rspec ./spec/models/trackback_spec.rb:22 # Trackback With the various trackback filters loaded and DNS mocked out appropriately A valid trackback should be accepted
rspec ./spec/models/trackback_spec.rb:34 # Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks with a spammy link in the excerpt should be rejected
rspec ./spec/models/trackback_spec.rb:41 # Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks with a spammy source url should be rejected
rspec ./spec/models/trackback_spec.rb:47 # Trackback With the various trackback filters loaded and DNS mocked out appropriately Trackbacks from a spammy ip address should be rejected
rspec ./spec/models/sidebar_spec.rb:16 # Sidebar#find_all_visible returns only the sidebar with active position
rspec ./spec/models/sidebar_spec.rb:31 # Sidebar#find with an invalid sidebar in the database skips the invalid active sidebar
rspec ./spec/models/ping_spec.rb:15 # Given a post which references a pingback enabled article Pingback sent to url found in referenced header
rspec ./spec/models/ping_spec.rb:22 # Given a post which references a pingback enabled article Pingback sent to url found in referenced body
rspec ./spec/models/ping_spec.rb:31 # Given a post which references a pingback enabled article Pingback sent when new article is saved
rspec ./spec/models/ping_spec.rb:79 # An article links to another article, which contains a trackback URL Trackback URL is detected and pinged
rspec ./spec/models/ping_spec.rb:86 # An article links to another article, which contains a trackback URL sends a trackback without html tag in excerpt
rspec ./spec/models/ping_spec.rb:100 # An article links to another article, which contains a trackback URL sends a trackback without markdown tag in excerpt
rspec ./spec/models/ping_spec.rb:149 # Given a remote site to notify, eg technorati we can ping them correctly
rspec ./spec/models/page_spec.rb:13 # Testing redirects a new published page gets a redirect
rspec ./spec/models/page_spec.rb:21 # Testing redirects a new unpublished page should not get a redirect
rspec ./spec/models/page_spec.rb:28 # Testing redirects Changin a published article permalink url should only change the to redirection
rspec ./spec/models/page_spec.rb:55 # Given the fixture :first_page Pages cannot have the same name
rspec ./spec/models/page_spec.rb:60 # Given the fixture :first_page should give a sanitized title
rspec ./spec/models/page_spec.rb:52 # Given the fixture :first_page#permalink_url 
rspec ./spec/models/page_spec.rb:122 # Given a valid page default filter should be fetched from the blog
rspec ./spec/models/post_type_spec.rb:25 # PostType post types are unique
rspec ./spec/models/post_type_spec.rb:10 # PostType Given a new post type should give a valid post type
rspec ./spec/models/post_type_spec.rb:14 # PostType Given a new post type should have a sanitized permalink
rspec ./spec/models/post_type_spec.rb:19 # PostType Given a new post type should have a sanitized permalink with a
rspec ./spec/models/theme_spec.rb:16 # Given the default theme theme should be typographic
rspec ./spec/models/theme_spec.rb:20 # Given the default theme theme description should be correct
rspec ./spec/models/theme_spec.rb:25 # Given the default theme theme_from_path should find the correct theme
rspec ./spec/models/theme_spec.rb:30 # Given the default theme#search_theme_path finds the right things 2
rspec ./spec/models/theme_spec.rb:41 # Given the default theme find_all finds all the installed themes
rspec ./spec/models/blog_spec.rb:56 # The first blog should be the only blog allowed
rspec ./spec/models/blog_spec.rb:62 # The default blog should pick up updates after a cache clear
rspec ./spec/models/blog_spec.rb:77 # Given no blogs, a new default blog should be valid after filling the title
rspec ./spec/models/blog_spec.rb:82 # Given no blogs, a new default blog should be valid without filling the title
rspec ./spec/models/blog_spec.rb:112 # Valid permalink in blog should be valid with only %title%
rspec ./spec/models/blog_spec.rb:112 # Valid permalink in blog should be valid with only %title%.html
rspec ./spec/models/blog_spec.rb:112 # Valid permalink in blog should be valid with only /hello/all/%year%/%title%
rspec ./spec/models/blog_spec.rb:112 # Valid permalink in blog should be valid with only atom/%title%.html
rspec ./spec/models/blog_spec.rb:112 # Valid permalink in blog should be valid with only ok/rss/%title%.html
rspec ./spec/models/ping_pinger_spec.rb:13 # Ping::Pinger with Test::Unit test_pingback_url_nil
rspec ./spec/models/ping_pinger_spec.rb:21 # Ping::Pinger with Test::Unit test_pingback_url_from_body
rspec ./spec/models/ping_pinger_spec.rb:28 # Ping::Pinger with Test::Unit test_pingback_url
rspec ./spec/models/user_spec.rb:44 # User With the contents and users fixtures loaded The various article finders work appropriately
rspec ./spec/models/user_spec.rb:221 # User#permalink_url 
rspec ./spec/models/tag_spec.rb:7 # Tag we can Tag.get by name
rspec ./spec/models/tag_spec.rb:12 # Tag tags are unique
rspec ./spec/models/tag_spec.rb:19 # Tag display names with spaces can be found by dash joined name
rspec ./spec/models/tag_spec.rb:29 # Tag articles can be tagged
rspec ./spec/models/tag_spec.rb:40 # Tag find_all_with_article_counters finds 2 tags
rspec ./spec/models/tag_spec.rb:56 # Tag permalink_url should be of form /tag/<name>
rspec ./spec/models/tag_spec.rb:62 # Tag#published_articles should return only published articles
rspec ./spec/models/article_spec.rb:86 # Article test_create
rspec ./spec/models/article_spec.rb:252 # Article test_find_published
rspec ./spec/models/article_spec.rb:426 # Article#search with several words and no result should be empty
rspec ./spec/models/category_spec.rb:18 # Category should know published_articles
rspec ./spec/models/category_spec.rb:27 # Category empty permalink should be converted
rspec ./spec/models/category_spec.rb:33 # Category category with permalink should not have permalink generated
rspec ./spec/models/category_spec.rb:45 # Category permalink 
rspec ./spec/models/cache_support_spec.rb:10 # Given a published article An unchanged article does not invalidate the cache
rspec ./spec/models/cache_support_spec.rb:14 # Given a published article changing the body smashes the cache
rspec ./spec/models/cache_support_spec.rb:19 # Given a published article withdrawing it smashes the cache
rspec ./spec/models/cache_support_spec.rb:24 # Given a published article destroying it smashes the cache
rspec ./spec/models/cache_support_spec.rb:29 # Given a published article withdrawing, then destroying it smashes the cache
rspec ./spec/models/cache_support_spec.rb:43 # Given an unpublished article publishing smashes the cache
rspec ./spec/models/cache_support_spec.rb:47 # Given an unpublished article changing it keeps the cache
rspec ./spec/models/cache_support_spec.rb:52 # Given an unpublished article destroying it keeps the cache
rspec ./spec/models/cache_support_spec.rb:67 # Given an unpublished spammy comment changing it does not alter the cache
rspec ./spec/models/cache_support_spec.rb:73 # Given an unpublished spammy comment publishing it does alter the cache
rspec ./spec/models/cache_support_spec.rb:80 # Given an unpublished spammy comment destroying it does not alter the cache
rspec ./spec/models/cache_support_spec.rb:92 # Given a published comment changing it destroys the cache
rspec ./spec/models/cache_support_spec.rb:98 # Given a published comment unpublishing it destroys the cache
rspec ./spec/models/cache_support_spec.rb:103 # Given a published comment destroying it destroys the cache
rspec ./spec/models/cache_support_spec.rb:116 # Given an unpublished spammy trackback changing it does not alter the cache
rspec ./spec/models/cache_support_spec.rb:122 # Given an unpublished spammy trackback publishing it does alter the cache
rspec ./spec/models/cache_support_spec.rb:129 # Given an unpublished spammy trackback destroying it does not alter the cache
rspec ./spec/models/cache_support_spec.rb:141 # Given a published trackback changing it destroys the cache
rspec ./spec/models/cache_support_spec.rb:147 # Given a published trackback unpublishing it destroys the cache
rspec ./spec/models/cache_support_spec.rb:152 # Given a published trackback destroying it destroys the cache
rspec ./spec/models/article_closing_spec.rb:17 # CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_new_article_should_be_open_if_auto_close_is_zero
rspec ./spec/models/article_closing_spec.rb:23 # CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_old_article_should_be_open_if_auto_close_is_zero
rspec ./spec/models/article_closing_spec.rb:28 # CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_new_article_should_be_open_if_auto_close_is_thirty
rspec ./spec/models/article_closing_spec.rb:36 # CommentClosing from Test::Unit; no I don't know why it's in article_closing_spec.rb test_old_article_should_be_closed_if_auto_close_is_thirty
rspec ./spec/models/text_filter_spec.rb:240 # With the list of available filters#filter text by name
rspec ./spec/models/text_filter_spec.rb:15 # With the list of available filters#available_filters 
rspec ./spec/models/text_filter_spec.rb:16 # With the list of available filters#available_filters 
rspec ./spec/models/text_filter_spec.rb:17 # With the list of available filters#available_filters 
rspec ./spec/models/text_filter_spec.rb:18 # With the list of available filters#available_filters 
rspec ./spec/models/text_filter_spec.rb:19 # With the list of available filters#available_filters 
rspec ./spec/models/text_filter_spec.rb:20 # With the list of available filters#available_filters 
rspec ./spec/models/text_filter_spec.rb:21 # With the list of available filters#available_filters 
rspec ./spec/models/text_filter_spec.rb:22 # With the list of available filters#available_filters 
rspec ./spec/models/text_filter_spec.rb:23 # With the list of available filters#available_filters 
rspec ./spec/models/text_filter_spec.rb:28 # With the list of available filters#macro_filters 
rspec ./spec/models/text_filter_spec.rb:29 # With the list of available filters#macro_filters 
rspec ./spec/models/text_filter_spec.rb:30 # With the list of available filters#macro_filters 
rspec ./spec/models/text_filter_spec.rb:31 # With the list of available filters#macro_filters 
rspec ./spec/models/text_filter_spec.rb:32 # With the list of available filters#macro_filters 
rspec ./spec/models/text_filter_spec.rb:33 # With the list of available filters#macro_filters 
rspec ./spec/models/text_filter_spec.rb:34 # With the list of available filters#macro_filters 
rspec ./spec/models/text_filter_spec.rb:35 # With the list of available filters#macro_filters 
rspec ./spec/models/text_filter_spec.rb:36 # With the list of available filters#macro_filters 
rspec ./spec/models/text_filter_spec.rb:45 # With the list of available filters#filter_text unknown
rspec ./spec/models/text_filter_spec.rb:50 # With the list of available filters#filter_text smartypants
rspec ./spec/models/text_filter_spec.rb:56 # With the list of available filters#filter_text markdown
rspec ./spec/models/text_filter_spec.rb:65 # With the list of available filters#filter_text filterchain
rspec ./spec/models/text_filter_spec.rb:147 # With the list of available filters#filter_text test_code_plus_markup_chain
rspec ./spec/models/text_filter_spec.rb:79 # With the list of available filters#filter_text specific typo tags flickr should show with default settings
rspec ./spec/models/text_filter_spec.rb:86 # With the list of available filters#filter_text specific typo tags flickr should use default image size
rspec ./spec/models/text_filter_spec.rb:93 # With the list of available filters#filter_text specific typo tags flickr should use caption
rspec ./spec/models/text_filter_spec.rb:100 # With the list of available filters#filter_text specific typo tags flickr broken_flickr_link
rspec ./spec/models/text_filter_spec.rb:112 # With the list of available filters#filter_text code textfilter single line should made nothin if no args
rspec ./spec/models/text_filter_spec.rb:116 # With the list of available filters#filter_text code textfilter single line should parse ruby lang
rspec ./spec/models/text_filter_spec.rb:120 # With the list of available filters#filter_text code textfilter single line should parse ruby and xml in same sentence but not in same place
rspec ./spec/models/text_filter_spec.rb:126 # With the list of available filters#filter_text code textfilter multiline should render ruby
rspec ./spec/models/text_filter_spec.rb:191 # With the list of available filters#filter_text lightbox should work
rspec ./spec/models/text_filter_spec.rb:198 # With the list of available filters#filter_text lightbox shoudl use default thumb image size
rspec ./spec/models/text_filter_spec.rb:205 # With the list of available filters#filter_text lightbox should use default display image size
rspec ./spec/models/text_filter_spec.rb:212 # With the list of available filters#filter_text lightbox should work with caption
rspec ./spec/models/text_filter_spec.rb:222 # With the list of available filters#filter_text combining a post-macro with markdown correctly interprets the macro
rspec ./spec/models/text_filter_spec.rb:230 # With the list of available filters#filter_text combining a post-macro with markdown correctly interprets the macro
rspec ./spec/views/layouts/default_spec.rb:24 # layouts/default.html.erb with theme dirtylicious when use_meta_keyword set to true renders assigned keywords
rspec ./spec/views/layouts/default_spec.rb:35 # layouts/default.html.erb with theme dirtylicious when use_meta_keyword set to false does not render assigned keywords
rspec ./spec/views/layouts/default_spec.rb:24 # layouts/default.html.erb with theme standard_issue when use_meta_keyword set to true renders assigned keywords
rspec ./spec/views/layouts/default_spec.rb:35 # layouts/default.html.erb with theme standard_issue when use_meta_keyword set to false does not render assigned keywords
rspec ./spec/views/layouts/default_spec.rb:24 # layouts/default.html.erb with theme true-red when use_meta_keyword set to true renders assigned keywords
rspec ./spec/views/layouts/default_spec.rb:35 # layouts/default.html.erb with theme true-red when use_meta_keyword set to false does not render assigned keywords
rspec ./spec/views/layouts/default_spec.rb:24 # layouts/default.html.erb with theme bootstrap when use_meta_keyword set to true renders assigned keywords
rspec ./spec/views/layouts/default_spec.rb:35 # layouts/default.html.erb with theme bootstrap when use_meta_keyword set to false does not render assigned keywords
rspec ./spec/views/layouts/default_spec.rb:24 # layouts/default.html.erb with theme scribbish when use_meta_keyword set to true renders assigned keywords
rspec ./spec/views/layouts/default_spec.rb:35 # layouts/default.html.erb with theme scribbish when use_meta_keyword set to false does not render assigned keywords
rspec ./spec/views/layouts/default_spec.rb:24 # layouts/default.html.erb with theme typographic when use_meta_keyword set to true renders assigned keywords
rspec ./spec/views/layouts/default_spec.rb:35 # layouts/default.html.erb with theme typographic when use_meta_keyword set to false does not render assigned keywords
rspec ./spec/views/layouts/default_spec.rb:24 # layouts/default.html.erb with theme true-blue-3 when use_meta_keyword set to true renders assigned keywords
rspec ./spec/views/layouts/default_spec.rb:35 # layouts/default.html.erb with theme true-blue-3 when use_meta_keyword set to false does not render assigned keywords
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # First dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Second dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Dodgy comment #3 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Extra Dodgy comment it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS1 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS1 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS1 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS1 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS1 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS2 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS2 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS2 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS2 it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS2 it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS2 it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # XSS2 it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Comment with bare http URL it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:23 # Comment with bare email address it should behave like CommentSanitization Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # First dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Second dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Dodgy comment #3 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Extra Dodgy comment with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS1 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # XSS2 with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Comment with bare http URL with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the  textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the textile textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the smartypants textfilter
rspec ./spec/views/comments/html_sanitization_spec.rb:138 # Comment with bare email address with dofollow it should behave like CommentSanitizationWithDofollow Should sanitize content rendered with the markdown smartypants textfilter
rspec ./spec/views/articles/feedback_atom_feed_spec.rb:17 # articles/feedback_atom_feed.atom.builder with one trackback should render a valid feed
rspec ./spec/views/articles/feedback_atom_feed_spec.rb:21 # articles/feedback_atom_feed.atom.builder with one trackback should render an Atom feed with one item
rspec ./spec/views/articles/feedback_atom_feed_spec.rb:26 # articles/feedback_atom_feed.atom.builder with one trackback the trackback entry should have all the required attributes
rspec ./spec/views/articles/feedback_atom_feed_spec.rb:46 # articles/feedback_atom_feed.atom.builder with a comment with problematic characters should render a valid feed
rspec ./spec/views/articles/feedback_atom_feed_spec.rb:50 # articles/feedback_atom_feed.atom.builder with a comment with problematic characters should render an Atom feed with one item
rspec ./spec/views/articles/index_spec.rb:23 # articles/index.html.erb without a theme normally should not have too many paragraph marks around body
rspec ./spec/views/articles/index_spec.rb:28 # articles/index.html.erb without a theme normally should not have div nested inside p
rspec ./spec/views/articles/index_spec.rb:32 # articles/index.html.erb without a theme normally should not have extra escaped html
rspec ./spec/views/articles/index_spec.rb:38 # articles/index.html.erb without a theme normally renders the regular article partial twice
rspec ./spec/views/articles/index_spec.rb:43 # articles/index.html.erb without a theme normally does not render any password forms
rspec ./spec/views/articles/index_spec.rb:61 # articles/index.html.erb without a theme without search, on page 2 should not have pagination link to page 2
rspec ./spec/views/articles/index_spec.rb:65 # articles/index.html.erb without a theme without search, on page 2 should have pagination link to page 1
rspec ./spec/views/articles/index_spec.rb:84 # articles/index.html.erb without a theme when on page 2 of search should not have pagination link to search page 2
rspec ./spec/views/articles/index_spec.rb:88 # articles/index.html.erb without a theme when on page 2 of search should have pagination link to search page 1
rspec ./spec/views/articles/index_spec.rb:23 # articles/index.html.erb with theme dirtylicious normally should not have too many paragraph marks around body
rspec ./spec/views/articles/index_spec.rb:28 # articles/index.html.erb with theme dirtylicious normally should not have div nested inside p
rspec ./spec/views/articles/index_spec.rb:32 # articles/index.html.erb with theme dirtylicious normally should not have extra escaped html
rspec ./spec/views/articles/index_spec.rb:38 # articles/index.html.erb with theme dirtylicious normally renders the regular article partial twice
rspec ./spec/views/articles/index_spec.rb:43 # articles/index.html.erb with theme dirtylicious normally does not render any password forms
rspec ./spec/views/articles/index_spec.rb:61 # articles/index.html.erb with theme dirtylicious without search, on page 2 should not have pagination link to page 2
rspec ./spec/views/articles/index_spec.rb:65 # articles/index.html.erb with theme dirtylicious without search, on page 2 should have pagination link to page 1
rspec ./spec/views/articles/index_spec.rb:84 # articles/index.html.erb with theme dirtylicious when on page 2 of search should not have pagination link to search page 2
rspec ./spec/views/articles/index_spec.rb:88 # articles/index.html.erb with theme dirtylicious when on page 2 of search should have pagination link to search page 1
rspec ./spec/views/articles/index_spec.rb:23 # articles/index.html.erb with theme standard_issue normally should not have too many paragraph marks around body
rspec ./spec/views/articles/index_spec.rb:28 # articles/index.html.erb with theme standard_issue normally should not have div nested inside p
rspec ./spec/views/articles/index_spec.rb:32 # articles/index.html.erb with theme standard_issue normally should not have extra escaped html
rspec ./spec/views/articles/index_spec.rb:38 # articles/index.html.erb with theme standard_issue normally renders the regular article partial twice
rspec ./spec/views/articles/index_spec.rb:43 # articles/index.html.erb with theme standard_issue normally does not render any password forms
rspec ./spec/views/articles/index_spec.rb:61 # articles/index.html.erb with theme standard_issue without search, on page 2 should not have pagination link to page 2
rspec ./spec/views/articles/index_spec.rb:65 # articles/index.html.erb with theme standard_issue without search, on page 2 should have pagination link to page 1
rspec ./spec/views/articles/index_spec.rb:84 # articles/index.html.erb with theme standard_issue when on page 2 of search should not have pagination link to search page 2
rspec ./spec/views/articles/index_spec.rb:88 # articles/index.html.erb with theme standard_issue when on page 2 of search should have pagination link to search page 1
rspec ./spec/views/articles/index_spec.rb:23 # articles/index.html.erb with theme true-red normally should not have too many paragraph marks around body
rspec ./spec/views/articles/index_spec.rb:28 # articles/index.html.erb with theme true-red normally should not have div nested inside p
rspec ./spec/views/articles/index_spec.rb:32 # articles/index.html.erb with theme true-red normally should not have extra escaped html
rspec ./spec/views/articles/index_spec.rb:38 # articles/index.html.erb with theme true-red normally renders the regular article partial twice
rspec ./spec/views/articles/index_spec.rb:43 # articles/index.html.erb with theme true-red normally does not render any password forms
rspec ./spec/views/articles/index_spec.rb:61 # articles/index.html.erb with theme true-red without search, on page 2 should not have pagination link to page 2
rspec ./spec/views/articles/index_spec.rb:65 # articles/index.html.erb with theme true-red without search, on page 2 should have pagination link to page 1
rspec ./spec/views/articles/index_spec.rb:84 # articles/index.html.erb with theme true-red when on page 2 of search should not have pagination link to search page 2
rspec ./spec/views/articles/index_spec.rb:88 # articles/index.html.erb with theme true-red when on page 2 of search should have pagination link to search page 1
rspec ./spec/views/articles/index_spec.rb:23 # articles/index.html.erb with theme bootstrap normally should not have too many paragraph marks around body
rspec ./spec/views/articles/index_spec.rb:28 # articles/index.html.erb with theme bootstrap normally should not have div nested inside p
rspec ./spec/views/articles/index_spec.rb:32 # articles/index.html.erb with theme bootstrap normally should not have extra escaped html
rspec ./spec/views/articles/index_spec.rb:38 # articles/index.html.erb with theme bootstrap normally renders the regular article partial twice
rspec ./spec/views/articles/index_spec.rb:43 # articles/index.html.erb with theme bootstrap normally does not render any password forms
rspec ./spec/views/articles/index_spec.rb:61 # articles/index.html.erb with theme bootstrap without search, on page 2 should not have pagination link to page 2
rspec ./spec/views/articles/index_spec.rb:65 # articles/index.html.erb with theme bootstrap without search, on page 2 should have pagination link to page 1
rspec ./spec/views/articles/index_spec.rb:84 # articles/index.html.erb with theme bootstrap when on page 2 of search should not have pagination link to search page 2
rspec ./spec/views/articles/index_spec.rb:88 # articles/index.html.erb with theme bootstrap when on page 2 of search should have pagination link to search page 1
rspec ./spec/views/articles/index_spec.rb:23 # articles/index.html.erb with theme scribbish normally should not have too many paragraph marks around body
rspec ./spec/views/articles/index_spec.rb:28 # articles/index.html.erb with theme scribbish normally should not have div nested inside p
rspec ./spec/views/articles/index_spec.rb:32 # articles/index.html.erb with theme scribbish normally should not have extra escaped html
rspec ./spec/views/articles/index_spec.rb:38 # articles/index.html.erb with theme scribbish normally renders the regular article partial twice
rspec ./spec/views/articles/index_spec.rb:43 # articles/index.html.erb with theme scribbish normally does not render any password forms
rspec ./spec/views/articles/index_spec.rb:61 # articles/index.html.erb with theme scribbish without search, on page 2 should not have pagination link to page 2
rspec ./spec/views/articles/index_spec.rb:65 # articles/index.html.erb with theme scribbish without search, on page 2 should have pagination link to page 1
rspec ./spec/views/articles/index_spec.rb:84 # articles/index.html.erb with theme scribbish when on page 2 of search should not have pagination link to search page 2
rspec ./spec/views/articles/index_spec.rb:88 # articles/index.html.erb with theme scribbish when on page 2 of search should have pagination link to search page 1
rspec ./spec/views/articles/index_spec.rb:23 # articles/index.html.erb with theme typographic normally should not have too many paragraph marks around body
rspec ./spec/views/articles/index_spec.rb:28 # articles/index.html.erb with theme typographic normally should not have div nested inside p
rspec ./spec/views/articles/index_spec.rb:32 # articles/index.html.erb with theme typographic normally should not have extra escaped html
rspec ./spec/views/articles/index_spec.rb:38 # articles/index.html.erb with theme typographic normally renders the regular article partial twice
rspec ./spec/views/articles/index_spec.rb:43 # articles/index.html.erb with theme typographic normally does not render any password forms
rspec ./spec/views/articles/index_spec.rb:61 # articles/index.html.erb with theme typographic without search, on page 2 should not have pagination link to page 2
rspec ./spec/views/articles/index_spec.rb:65 # articles/index.html.erb with theme typographic without search, on page 2 should have pagination link to page 1
rspec ./spec/views/articles/index_spec.rb:84 # articles/index.html.erb with theme typographic when on page 2 of search should not have pagination link to search page 2
rspec ./spec/views/articles/index_spec.rb:88 # articles/index.html.erb with theme typographic when on page 2 of search should have pagination link to search page 1
rspec ./spec/views/articles/index_spec.rb:23 # articles/index.html.erb with theme true-blue-3 normally should not have too many paragraph marks around body
rspec ./spec/views/articles/index_spec.rb:28 # articles/index.html.erb with theme true-blue-3 normally should not have div nested inside p
rspec ./spec/views/articles/index_spec.rb:32 # articles/index.html.erb with theme true-blue-3 normally should not have extra escaped html
rspec ./spec/views/articles/index_spec.rb:38 # articles/index.html.erb with theme true-blue-3 normally renders the regular article partial twice
rspec ./spec/views/articles/index_spec.rb:43 # articles/index.html.erb with theme true-blue-3 normally does not render any password forms
rspec ./spec/views/articles/index_spec.rb:61 # articles/index.html.erb with theme true-blue-3 without search, on page 2 should not have pagination link to page 2
rspec ./spec/views/articles/index_spec.rb:65 # articles/index.html.erb with theme true-blue-3 without search, on page 2 should have pagination link to page 1
rspec ./spec/views/articles/index_spec.rb:84 # articles/index.html.erb with theme true-blue-3 when on page 2 of search should not have pagination link to search page 2
rspec ./spec/views/articles/index_spec.rb:88 # articles/index.html.erb with theme true-blue-3 when on page 2 of search should have pagination link to search page 1
rspec ./spec/controllers/backend_controller_spec.rb:32 # BackendController when called through Blogger API test_blogger_delete_post
rspec ./spec/controllers/backend_controller_spec.rb:40 # BackendController when called through Blogger API test_blogger_get_users_blogs
rspec ./spec/controllers/backend_controller_spec.rb:47 # BackendController when called through Blogger API test_blogger_get_user_info
rspec ./spec/controllers/backend_controller_spec.rb:54 # BackendController when called through Blogger API test_blogger_new_post
rspec ./spec/controllers/backend_controller_spec.rb:70 # BackendController when called through Blogger API test_blogger_new_post_no_title
rspec ./spec/controllers/backend_controller_spec.rb:81 # BackendController when called through Blogger API test_blogger_new_post_with_categories
rspec ./spec/controllers/backend_controller_spec.rb:97 # BackendController when called through Blogger API test_blogger_new_post_with_non_existing_categories
rspec ./spec/controllers/backend_controller_spec.rb:108 # BackendController when called through Blogger API test_blogger_fail_authentication
rspec ./spec/controllers/backend_controller_spec.rb:117 # BackendController when called through the MetaWeblog API test_meta_weblog_get_categories
rspec ./spec/controllers/backend_controller_spec.rb:124 # BackendController when called through the MetaWeblog API test_meta_weblog_get_post
rspec ./spec/controllers/backend_controller_spec.rb:132 # BackendController when called through the MetaWeblog API test_meta_weblog_get_recent_posts
rspec ./spec/controllers/backend_controller_spec.rb:147 # BackendController when called through the MetaWeblog API test_meta_weblog_delete_post
rspec ./spec/controllers/backend_controller_spec.rb:196 # BackendController when called through the MetaWeblog API test_meta_weblog_new_post_fails
rspec ./spec/controllers/backend_controller_spec.rb:209 # BackendController when called through the MetaWeblog API test_meta_weblog_new_post
rspec ./spec/controllers/backend_controller_spec.rb:232 # BackendController when called through the MetaWeblog API test_meta_weblog_new_unpublished_post_with_blank_creation_date
rspec ./spec/controllers/backend_controller_spec.rb:246 # BackendController when called through the MetaWeblog API should set categories if specified in new post
rspec ./spec/controllers/backend_controller_spec.rb:264 # BackendController when called through the MetaWeblog API test_meta_weblog_edit_unpublished_post_with_old_creation_date
rspec ./spec/controllers/backend_controller_spec.rb:280 # BackendController when called through the MetaWeblog API test_meta_weblog_new_media_object
rspec ./spec/controllers/backend_controller_spec.rb:294 # BackendController when called through the MetaWeblog API test_meta_weblog_fail_authentication
rspec ./spec/controllers/backend_controller_spec.rb:300 # BackendController when called through the MetaWeblog API test_meta_weblog_should_preserve_date_time_on_roundtrip_edit
rspec ./spec/controllers/backend_controller_spec.rb:167 # BackendController when called through the MetaWeblog API when editing a post test_meta_weblog_edit_post
rspec ./spec/controllers/backend_controller_spec.rb:181 # BackendController when called through the MetaWeblog API when editing a post should set categories if specified
rspec ./spec/controllers/backend_controller_spec.rb:321 # BackendController when called through the Movable Type API test_mt_get_category_list
rspec ./spec/controllers/backend_controller_spec.rb:328 # BackendController when called through the Movable Type API test_mt_get_post_categories
rspec ./spec/controllers/backend_controller_spec.rb:340 # BackendController when called through the Movable Type API test_mt_get_recent_post_titles
rspec ./spec/controllers/backend_controller_spec.rb:350 # BackendController when called through the Movable Type API test_mt_set_post_categories
rspec ./spec/controllers/backend_controller_spec.rb:373 # BackendController when called through the Movable Type API test_mt_supported_text_filters
rspec ./spec/controllers/backend_controller_spec.rb:379 # BackendController when called through the Movable Type API test_mt_supported_methods
rspec ./spec/controllers/backend_controller_spec.rb:385 # BackendController when called through the Movable Type API test_mt_get_trackback_pings
rspec ./spec/controllers/backend_controller_spec.rb:396 # BackendController when called through the Movable Type API should publish post
rspec ./spec/controllers/backend_controller_spec.rb:412 # BackendController when called through the Movable Type API test_mt_fail_authentication
rspec ./spec/controllers/tags_controller_spec.rb:16 # TagsController /index normally 
rspec ./spec/controllers/tags_controller_spec.rb:17 # TagsController /index normally 
rspec ./spec/controllers/tags_controller_spec.rb:18 # TagsController /index normally 
rspec ./spec/controllers/tags_controller_spec.rb:19 # TagsController /index normally 
rspec ./spec/controllers/tags_controller_spec.rb:23 # TagsController /index if :index template exists should render :index
rspec ./spec/controllers/tags_controller_spec.rb:50 # TagsController showing a single tag with some articles should be successful
rspec ./spec/controllers/tags_controller_spec.rb:55 # TagsController showing a single tag with some articles should retrieve the correct set of articles
rspec ./spec/controllers/tags_controller_spec.rb:60 # TagsController showing a single tag with some articles should render :show by default
rspec ./spec/controllers/tags_controller_spec.rb:68 # TagsController showing a single tag with some articles should fall back to rendering articles/index
rspec ./spec/controllers/tags_controller_spec.rb:75 # TagsController showing a single tag with some articles should set the page title to "Tag foo"
rspec ./spec/controllers/tags_controller_spec.rb:80 # TagsController showing a single tag with some articles should render the atom feed for /articles/tag/foo.atom
rspec ./spec/controllers/tags_controller_spec.rb:86 # TagsController showing a single tag with some articles should render the rss feed for /articles/tag/foo.rss
rspec ./spec/controllers/tags_controller_spec.rb:95 # TagsController showing a single tag without articles should redirect to main page
rspec ./spec/controllers/tags_controller_spec.rb:114 # TagsController showing tag "foo" should have good rss feed link in head
rspec ./spec/controllers/tags_controller_spec.rb:118 # TagsController showing tag "foo" should have good atom feed link in head
rspec ./spec/controllers/tags_controller_spec.rb:122 # TagsController showing tag "foo" should have a canonical URL
rspec ./spec/controllers/tags_controller_spec.rb:129 # TagsController showing a non-existant tag should redirect to main page
rspec ./spec/controllers/tags_controller_spec.rb:141 # TagsController password protected article article in tag should be password protected
rspec ./spec/controllers/tags_controller_spec.rb:161 # TagsController SEO Options should have rel nofollow
rspec ./spec/controllers/tags_controller_spec.rb:169 # TagsController SEO Options should not have rel nofollow
rspec ./spec/controllers/tags_controller_spec.rb:178 # TagsController SEO Options should not have meta keywords with deactivated option and no blog keywords
rspec ./spec/controllers/tags_controller_spec.rb:185 # TagsController SEO Options should not have meta keywords with deactivated option and blog keywords
rspec ./spec/controllers/tags_controller_spec.rb:193 # TagsController SEO Options should not have meta keywords with activated option and no blog keywords
rspec ./spec/controllers/tags_controller_spec.rb:200 # TagsController SEO Options should have meta keywords with activated option and blog keywords
rspec ./spec/controllers/articles_controller_spec.rb:25 # ArticlesController should redirect category to /categories
rspec ./spec/controllers/articles_controller_spec.rb:30 # ArticlesController should redirect tag to /tags
rspec ./spec/controllers/articles_controller_spec.rb:179 # ArticlesController archives
rspec ./spec/controllers/articles_controller_spec.rb:41 # ArticlesController index action should be render template index
rspec ./spec/controllers/articles_controller_spec.rb:45 # ArticlesController index action should show some articles
rspec ./spec/controllers/articles_controller_spec.rb:49 # ArticlesController index action should have good link feed rss
rspec ./spec/controllers/articles_controller_spec.rb:53 # ArticlesController index action should have good link feed atom
rspec ./spec/controllers/articles_controller_spec.rb:57 # ArticlesController index action should have a canonical url
rspec ./spec/controllers/articles_controller_spec.rb:61 # ArticlesController index action should have googd title
rspec ./spec/controllers/articles_controller_spec.rb:65 # ArticlesController index action should have a custom tracking field
rspec ./spec/controllers/articles_controller_spec.rb:119 # ArticlesController#search action should render feed rss by search
rspec ./spec/controllers/articles_controller_spec.rb:127 # ArticlesController#search action should render feed atom by search
rspec ./spec/controllers/articles_controller_spec.rb:135 # ArticlesController#search action search with empty result
rspec ./spec/controllers/articles_controller_spec.rb:84 # ArticlesController#search action a valid search should render template search
rspec ./spec/controllers/articles_controller_spec.rb:88 # ArticlesController#search action a valid search should assigns articles
rspec ./spec/controllers/articles_controller_spec.rb:92 # ArticlesController#search action a valid search should have good feed rss link
rspec ./spec/controllers/articles_controller_spec.rb:96 # ArticlesController#search action a valid search should have good feed atom link
rspec ./spec/controllers/articles_controller_spec.rb:100 # ArticlesController#search action a valid search should have a canonical url
rspec ./spec/controllers/articles_controller_spec.rb:104 # ArticlesController#search action a valid search should have a good title
rspec ./spec/controllers/articles_controller_spec.rb:108 # ArticlesController#search action a valid search should have content markdown interpret and without html tag
rspec ./spec/controllers/articles_controller_spec.rb:114 # ArticlesController#search action a valid search should have a custom tracking field
rspec ./spec/controllers/articles_controller_spec.rb:154 # ArticlesController#livesearch action with a query with several words should be valid
rspec ./spec/controllers/articles_controller_spec.rb:159 # ArticlesController#livesearch action with a query with several words should render without layout
rspec ./spec/controllers/articles_controller_spec.rb:163 # ArticlesController#livesearch action with a query with several words should render template live_search
rspec ./spec/controllers/articles_controller_spec.rb:167 # ArticlesController#livesearch action with a query with several words should not have h3 tag
rspec ./spec/controllers/articles_controller_spec.rb:171 # ArticlesController#livesearch action with a query with several words should assign @search the search string
rspec ./spec/controllers/articles_controller_spec.rb:198 # ArticlesController index for a month should render template index
rspec ./spec/controllers/articles_controller_spec.rb:202 # ArticlesController index for a month should contain some articles
rspec ./spec/controllers/articles_controller_spec.rb:207 # ArticlesController index for a month should have a canonical url
rspec ./spec/controllers/articles_controller_spec.rb:211 # ArticlesController index for a month should have a good title
rspec ./spec/controllers/articles_controller_spec.rb:215 # ArticlesController index for a month should have a custom tracking field
rspec ./spec/controllers/articles_controller_spec.rb:244 # ArticlesController nousers redirects to signup
rspec ./spec/controllers/articles_controller_spec.rb:264 # ArticlesController feeds /articles.atom => an atom feed
rspec ./spec/controllers/articles_controller_spec.rb:272 # ArticlesController feeds /articles.rss => an RSS 2.0 feed
rspec ./spec/controllers/articles_controller_spec.rb:280 # ArticlesController feeds atom feed for archive should be valid
rspec ./spec/controllers/articles_controller_spec.rb:287 # ArticlesController feeds RSS feed for archive should be valid
rspec ./spec/controllers/articles_controller_spec.rb:301 # ArticlesController the index should ignore the HTTP Accept: header
rspec ./spec/controllers/articles_controller_spec.rb:318 # ArticlesController previewing with non logged user should redirect to login
rspec ./spec/controllers/articles_controller_spec.rb:333 # ArticlesController previewing with logged user should render template /articles/read
rspec ./spec/controllers/articles_controller_spec.rb:333 # ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/dirtylicious/views/articles/read
rspec ./spec/controllers/articles_controller_spec.rb:333 # ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/standard_issue/views/articles/read
rspec ./spec/controllers/articles_controller_spec.rb:333 # ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/true-red/views/articles/read
rspec ./spec/controllers/articles_controller_spec.rb:333 # ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/bootstrap/views/articles/read
rspec ./spec/controllers/articles_controller_spec.rb:333 # ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/scribbish/views/articles/read
rspec ./spec/controllers/articles_controller_spec.rb:333 # ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/typographic/views/articles/read
rspec ./spec/controllers/articles_controller_spec.rb:333 # ArticlesController previewing with logged user should render template /home/ec2-user/environment/typo/themes/true-blue-3/views/articles/read
rspec ./spec/controllers/articles_controller_spec.rb:340 # ArticlesController previewing with logged user should assigns article define with id
rspec ./spec/controllers/articles_controller_spec.rb:345 # ArticlesController previewing with logged user should assigns last article with id like parent_id
rspec ./spec/controllers/articles_controller_spec.rb:446 # ArticlesController redirecting should get good article with utf8 slug
rspec ./spec/controllers/articles_controller_spec.rb:455 # ArticlesController redirecting should get good article with pre-escaped utf8 slug using unescaped slug
rspec ./spec/controllers/articles_controller_spec.rb:356 # ArticlesController redirecting with explicit redirects should redirect from known URL
rspec ./spec/controllers/articles_controller_spec.rb:377 # ArticlesController redirecting with explicit redirects should not redirect from unknown URL
rspec ./spec/controllers/articles_controller_spec.rb:423 # ArticlesController redirecting with explicit redirects and non-empty relative_url_root should redirect
rspec ./spec/controllers/articles_controller_spec.rb:430 # ArticlesController redirecting with explicit redirects and non-empty relative_url_root should redirect if to_path includes relative_url_root
rspec ./spec/controllers/articles_controller_spec.rb:437 # ArticlesController redirecting with explicit redirects and non-empty relative_url_root should ignore the blog base_url if the to_path is a full uri
rspec ./spec/controllers/articles_controller_spec.rb:464 # ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article
rspec ./spec/controllers/articles_controller_spec.rb:475 # ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article with url_root
rspec ./spec/controllers/articles_controller_spec.rb:486 # ArticlesController redirecting accessing old-style URL with "articles" as the first part should redirect to article with articles in url_root
rspec ./spec/controllers/articles_controller_spec.rb:510 # ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find '.htmlsecond-blog-article'
rspec ./spec/controllers/articles_controller_spec.rb:515 # ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find 'second-blog-article.html.html'
rspec ./spec/controllers/articles_controller_spec.rb:520 # ArticlesController redirecting with permalink_format like %title%.html accessing various non-matching URLs should not find 'second-blog-article.html/foo'
rspec ./spec/controllers/articles_controller_spec.rb:527 # ArticlesController redirecting with permalink_format like %title%.html accessing legacy URLs should redirect from default URL format
rspec ./spec/controllers/articles_controller_spec.rb:533 # ArticlesController redirecting with permalink_format like %title%.html accessing legacy URLs should redirect from old-style URL format with "articles" part
rspec ./spec/controllers/articles_controller_spec.rb:546 # ArticlesController redirecting with permalink_format like %title%.html accessing an article should render template read to article
rspec ./spec/controllers/articles_controller_spec.rb:550 # ArticlesController redirecting with permalink_format like %title%.html accessing an article should assign article1 to @article
rspec ./spec/controllers/articles_controller_spec.rb:557 # ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have good rss feed link
rspec ./spec/controllers/articles_controller_spec.rb:561 # ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have good atom feed link
rspec ./spec/controllers/articles_controller_spec.rb:565 # ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have a canonical url
rspec ./spec/controllers/articles_controller_spec.rb:569 # ArticlesController redirecting with permalink_format like %title%.html accessing an article the resulting page should have a good title
rspec ./spec/controllers/articles_controller_spec.rb:583 # ArticlesController redirecting with permalink_format like %title%.html rendering as atom feed should render feedback atom feed
rspec ./spec/controllers/articles_controller_spec.rb:597 # ArticlesController redirecting with permalink_format like %title%.html rendering as rss feed should render rss20 partial
rspec ./spec/controllers/articles_controller_spec.rb:612 # ArticlesController redirecting with a format containing a fixed component should find the article if the url matches all components
rspec ./spec/controllers/articles_controller_spec.rb:617 # ArticlesController redirecting with a format containing a fixed component should not find the article if the url does not match the fixed component
rspec ./spec/controllers/articles_controller_spec.rb:630 # ArticlesController redirecting with a custom format with several fixed parts and several variables should find the article if the url matches all components
rspec ./spec/controllers/articles_controller_spec.rb:636 # ArticlesController redirecting with a custom format with several fixed parts and several variables should not find the article if the url only matches some components
rspec ./spec/controllers/articles_controller_spec.rb:664 # ArticlesController password protected article alone should be password protected
rspec ./spec/controllers/articles_controller_spec.rb:670 # ArticlesController password protected#check_password shows article when given correct password
rspec ./spec/controllers/articles_controller_spec.rb:675 # ArticlesController password protected#check_password shows password form when given incorrect password
rspec ./spec/controllers/articles_controller_spec.rb:701 # ArticlesController assigned keywords article with categories should have meta keywords
rspec ./spec/controllers/articles_controller_spec.rb:710 # ArticlesController assigned keywords article with neither categories nor tags should not have meta keywords
rspec ./spec/controllers/articles_controller_spec.rb:718 # ArticlesController assigned keywords index without option and no blog keywords should not have meta keywords
rspec ./spec/controllers/articles_controller_spec.rb:723 # ArticlesController assigned keywords index without option but with blog keywords should have meta keywords
rspec ./spec/controllers/theme_controller_spec.rb:8 # ThemeController test_stylesheets
rspec ./spec/controllers/theme_controller_spec.rb:16 # ThemeController test_images
rspec ./spec/controllers/theme_controller_spec.rb:23 # ThemeController test_malicious_path
rspec ./spec/controllers/theme_controller_spec.rb:28 # ThemeController test_view_theming
rspec ./spec/controllers/admin/resources_controller_spec.rb:43 # Admin::ResourcesController test_destroy_image with POST
rspec ./spec/controllers/admin/resources_controller_spec.rb:50 # Admin::ResourcesController test_upload
rspec ./spec/controllers/admin/resources_controller_spec.rb:19 # Admin::ResourcesController test_index should render index template
rspec ./spec/controllers/admin/resources_controller_spec.rb:32 # Admin::ResourcesController test_destroy_image with get should render template destroy
rspec ./spec/controllers/admin/resources_controller_spec.rb:37 # Admin::ResourcesController test_destroy_image with get should have a valid file
rspec ./spec/controllers/admin/settings_controller_spec.rb:19 # Admin::SettingsController#index should render index
rspec ./spec/controllers/admin/settings_controller_spec.rb:29 # Admin::SettingsController write action should be success
rspec ./spec/controllers/admin/settings_controller_spec.rb:39 # Admin::SettingsController feedback action should be sucess
rspec ./spec/controllers/admin/settings_controller_spec.rb:45 # Admin::SettingsController redirect action should be success
rspec ./spec/controllers/admin/settings_controller_spec.rb:66 # Admin::SettingsController update action should success
rspec ./spec/controllers/admin/settings_controller_spec.rb:71 # Admin::SettingsController update action should not save blog with bad permalink format
rspec ./spec/controllers/admin/pages_controller_spec.rb:56 # Admin::PagesController test_create
rspec ./spec/controllers/admin/pages_controller_spec.rb:85 # Admin::PagesController test_update
rspec ./spec/controllers/admin/pages_controller_spec.rb:96 # Admin::PagesController test_destroy
rspec ./spec/controllers/admin/pages_controller_spec.rb:110 # Admin::PagesController should create a published page with a redirect
rspec ./spec/controllers/admin/pages_controller_spec.rb:115 # Admin::PagesController should create an unpublished page without a redirect
rspec ./spec/controllers/admin/pages_controller_spec.rb:120 # Admin::PagesController should create a page published in the future without a redirect
rspec ./spec/controllers/admin/pages_controller_spec.rb:16 # Admin::PagesController#index should response success
rspec ./spec/controllers/admin/pages_controller_spec.rb:23 # Admin::PagesController#index should response success with :page args
rspec ./spec/controllers/admin/pages_controller_spec.rb:39 # Admin::PagesController new without page params should render template new and has a page object
rspec ./spec/controllers/admin/pages_controller_spec.rb:45 # Admin::PagesController new without page params should assign to current user
rspec ./spec/controllers/admin/pages_controller_spec.rb:49 # Admin::PagesController new without page params should have a text filter
rspec ./spec/controllers/admin/pages_controller_spec.rb:76 # Admin::PagesController test_edit should render edit template
rspec ./spec/controllers/admin/pages_controller_spec.rb:127 # Admin::PagesController insert_editor action should render _simple_editor
rspec ./spec/controllers/admin/pages_controller_spec.rb:132 # Admin::PagesController insert_editor action should render _visual_editor
rspec ./spec/controllers/admin/pages_controller_spec.rb:137 # Admin::PagesController insert_editor action should render _visual_editor even if editor param is set to unknow editor
rspec ./spec/controllers/admin/tags_controller_spec.rb:19 # Admin::TagsController index action should be success
rspec ./spec/controllers/admin/tags_controller_spec.rb:23 # Admin::TagsController index action should render template index
rspec ./spec/controllers/admin/tags_controller_spec.rb:34 # Admin::TagsController edit action should be success
rspec ./spec/controllers/admin/tags_controller_spec.rb:38 # Admin::TagsController edit action should render template edit
rspec ./spec/controllers/admin/tags_controller_spec.rb:42 # Admin::TagsController edit action should assigns value :tag
rspec ./spec/controllers/admin/tags_controller_spec.rb:53 # Admin::TagsController destroy action with GET should be success
rspec ./spec/controllers/admin/tags_controller_spec.rb:57 # Admin::TagsController destroy action with GET should have an id in the form destination
rspec ./spec/controllers/admin/tags_controller_spec.rb:61 # Admin::TagsController destroy action with GET should render template edit
rspec ./spec/controllers/admin/tags_controller_spec.rb:65 # Admin::TagsController destroy action with GET should assigns value :tag
rspec ./spec/controllers/admin/tags_controller_spec.rb:76 # Admin::TagsController destroy action with POST should redirect to index
rspec ./spec/controllers/admin/tags_controller_spec.rb:80 # Admin::TagsController destroy action with POST should have one less tags
rspec ./spec/controllers/admin/tags_controller_spec.rb:92 # Admin::TagsController update action should redirect to index
rspec ./spec/controllers/admin/tags_controller_spec.rb:96 # Admin::TagsController update action should update tag
rspec ./spec/controllers/admin/tags_controller_spec.rb:102 # Admin::TagsController update action should create a redirect from the old to the new
rspec ./spec/controllers/admin/feedback_controller_spec.rb:58 # Admin::FeedbackController logged in admin user destroy action should destroy feedback from article doesn't own
rspec ./spec/controllers/admin/feedback_controller_spec.rb:8 # Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should destroy feedback
rspec ./spec/controllers/admin/feedback_controller_spec.rb:18 # Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should redirect to feedback from article
rspec ./spec/controllers/admin/feedback_controller_spec.rb:23 # Admin::FeedbackController logged in admin user destroy action it should behave like destroy feedback with feedback from own article should not destroy feedback in get request
rspec ./spec/controllers/admin/feedback_controller_spec.rb:82 # Admin::FeedbackController logged in admin user index action should success
rspec ./spec/controllers/admin/feedback_controller_spec.rb:90 # Admin::FeedbackController logged in admin user index action should view only unconfirmed feedback
rspec ./spec/controllers/admin/feedback_controller_spec.rb:98 # Admin::FeedbackController logged in admin user index action should view only spam feedback
rspec ./spec/controllers/admin/feedback_controller_spec.rb:106 # Admin::FeedbackController logged in admin user index action should view unconfirmed_spam
rspec ./spec/controllers/admin/feedback_controller_spec.rb:117 # Admin::FeedbackController logged in admin user index action should view presumed_spam
rspec ./spec/controllers/admin/feedback_controller_spec.rb:125 # Admin::FeedbackController logged in admin user index action should view presumed_ham
rspec ./spec/controllers/admin/feedback_controller_spec.rb:134 # Admin::FeedbackController logged in admin user index action should get page 1 if page params empty
rspec ./spec/controllers/admin/feedback_controller_spec.rb:148 # Admin::FeedbackController logged in admin user article action should see all feedback on one article
rspec ./spec/controllers/admin/feedback_controller_spec.rb:158 # Admin::FeedbackController logged in admin user article action should see only spam feedback on one article
rspec ./spec/controllers/admin/feedback_controller_spec.rb:167 # Admin::FeedbackController logged in admin user article action should see only ham feedback on one article
rspec ./spec/controllers/admin/feedback_controller_spec.rb:176 # Admin::FeedbackController logged in admin user article action should redirect_to index if bad article id
rspec ./spec/controllers/admin/feedback_controller_spec.rb:191 # Admin::FeedbackController logged in admin user create action by get access should raise ActiveRecordNotFound if article doesn't exist
rspec ./spec/controllers/admin/feedback_controller_spec.rb:197 # Admin::FeedbackController logged in admin user create action by get access should not create comment
rspec ./spec/controllers/admin/feedback_controller_spec.rb:208 # Admin::FeedbackController logged in admin user create action by post access should raise ActiveRecordNotFound if article doesn't exist
rspec ./spec/controllers/admin/feedback_controller_spec.rb:214 # Admin::FeedbackController logged in admin user create action by post access should create comment
rspec ./spec/controllers/admin/feedback_controller_spec.rb:222 # Admin::FeedbackController logged in admin user create action by post access should create comment mark as ham
rspec ./spec/controllers/admin/feedback_controller_spec.rb:235 # Admin::FeedbackController logged in admin user edit action should render edit form
rspec ./spec/controllers/admin/feedback_controller_spec.rb:248 # Admin::FeedbackController logged in admin user update action should update comment if post request
rspec ./spec/controllers/admin/feedback_controller_spec.rb:260 # Admin::FeedbackController logged in admin user update action should not  update comment if get request
rspec ./spec/controllers/admin/feedback_controller_spec.rb:298 # Admin::FeedbackController publisher access destroy action should not destroy feedback doesn't own
rspec ./spec/controllers/admin/feedback_controller_spec.rb:8 # Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should destroy feedback
rspec ./spec/controllers/admin/feedback_controller_spec.rb:18 # Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should redirect to feedback from article
rspec ./spec/controllers/admin/feedback_controller_spec.rb:23 # Admin::FeedbackController publisher access destroy action it should behave like destroy feedback with feedback from own article should not destroy feedback in get request
rspec ./spec/controllers/admin/feedback_controller_spec.rb:309 # Admin::FeedbackController publisher access edit action should not edit comment no own article
rspec ./spec/controllers/admin/feedback_controller_spec.rb:314 # Admin::FeedbackController publisher access edit action should edit comment if own article
rspec ./spec/controllers/admin/feedback_controller_spec.rb:326 # Admin::FeedbackController publisher access update action should update comment if own article
rspec ./spec/controllers/admin/feedback_controller_spec.rb:336 # Admin::FeedbackController publisher access update action should not update comment if not own article
rspec ./spec/controllers/admin/feedback_controller_spec.rb:348 # Admin::FeedbackController publisher access#bulkops action should redirect to action
rspec ./spec/controllers/admin/content_controller_spec.rb:191 # Admin::ContentController insert_editor action should render _simple_editor
rspec ./spec/controllers/admin/content_controller_spec.rb:196 # Admin::ContentController insert_editor action should render _visual_editor
rspec ./spec/controllers/admin/content_controller_spec.rb:201 # Admin::ContentController insert_editor action should render _visual_editor even if editor param is set to unknow editor
rspec ./spec/controllers/admin/content_controller_spec.rb:9 # Admin::ContentController with admin connection it should behave like index action should render template index
rspec ./spec/controllers/admin/content_controller_spec.rb:14 # Admin::ContentController with admin connection it should behave like index action should see all published in index
rspec ./spec/controllers/admin/content_controller_spec.rb:20 # Admin::ContentController with admin connection it should behave like index action should restrict only by searchstring
rspec ./spec/controllers/admin/content_controller_spec.rb:28 # Admin::ContentController with admin connection it should behave like index action should restrict by searchstring and published_at
rspec ./spec/controllers/admin/content_controller_spec.rb:36 # Admin::ContentController with admin connection it should behave like index action should restrict to drafts
rspec ./spec/controllers/admin/content_controller_spec.rb:44 # Admin::ContentController with admin connection it should behave like index action should restrict to publication pending articles
rspec ./spec/controllers/admin/content_controller_spec.rb:52 # Admin::ContentController with admin connection it should behave like index action should restrict to withdrawn articles
rspec ./spec/controllers/admin/content_controller_spec.rb:60 # Admin::ContentController with admin connection it should behave like index action should restrict to withdrawn articles
rspec ./spec/controllers/admin/content_controller_spec.rb:68 # Admin::ContentController with admin connection it should behave like index action should restrict to published articles
rspec ./spec/controllers/admin/content_controller_spec.rb:75 # Admin::ContentController with admin connection it should behave like index action should fallback to default behavior
rspec ./spec/controllers/admin/content_controller_spec.rb:233 # Admin::ContentController with admin connection it should behave like new action should create article with no comments
rspec ./spec/controllers/admin/content_controller_spec.rb:241 # Admin::ContentController with admin connection it should behave like new action should create a published article with a redirect
rspec ./spec/controllers/admin/content_controller_spec.rb:246 # Admin::ContentController with admin connection it should behave like new action should create a draft article without a redirect
rspec ./spec/controllers/admin/content_controller_spec.rb:251 # Admin::ContentController with admin connection it should behave like new action should create an unpublished article without a redirect
rspec ./spec/controllers/admin/content_controller_spec.rb:256 # Admin::ContentController with admin connection it should behave like new action should create an article published in the future without a redirect
rspec ./spec/controllers/admin/content_controller_spec.rb:261 # Admin::ContentController with admin connection it should behave like new action should create article with no pings
rspec ./spec/controllers/admin/content_controller_spec.rb:268 # Admin::ContentController with admin connection it should behave like new action should create an article linked to the current user
rspec ./spec/controllers/admin/content_controller_spec.rb:274 # Admin::ContentController with admin connection it should behave like new action should create new published article
rspec ./spec/controllers/admin/content_controller_spec.rb:280 # Admin::ContentController with admin connection it should behave like new action should redirect to show
rspec ./spec/controllers/admin/content_controller_spec.rb:285 # Admin::ContentController with admin connection it should behave like new action should send notifications on create
rspec ./spec/controllers/admin/content_controller_spec.rb:302 # Admin::ContentController with admin connection it should behave like new action should create an article in a category
rspec ./spec/controllers/admin/content_controller_spec.rb:309 # Admin::ContentController with admin connection it should behave like new action should create an article with tags
rspec ./spec/controllers/admin/content_controller_spec.rb:315 # Admin::ContentController with admin connection it should behave like new action should create article in future
rspec ./spec/controllers/admin/content_controller_spec.rb:326 # Admin::ContentController with admin connection it should behave like new action should correctly interpret time zone in :published_at
rspec ./spec/controllers/admin/content_controller_spec.rb:332 # Admin::ContentController with admin connection it should behave like new action should respect "GMT+0000 (UTC)" in :published_at
rspec ./spec/controllers/admin/content_controller_spec.rb:338 # Admin::ContentController with admin connection it should behave like new action should create a filtered article
rspec ./spec/controllers/admin/content_controller_spec.rb:211 # Admin::ContentController with admin connection it should behave like new action GET renders the 'new' template
rspec ./spec/controllers/admin/content_controller_spec.rb:218 # Admin::ContentController with admin connection it should behave like new action GET correctly converts multi-word tags
rspec ./spec/controllers/admin/content_controller_spec.rb:361 # Admin::ContentController with admin connection it should behave like new action publishing a published article with an autosaved draft updates the original
rspec ./spec/controllers/admin/content_controller_spec.rb:367 # Admin::ContentController with admin connection it should behave like new action publishing a published article with an autosaved draft deletes the draft
rspec ./spec/controllers/admin/content_controller_spec.rb:381 # Admin::ContentController with admin connection it should behave like new action publishing a draft copy of a published article updates the original
rspec ./spec/controllers/admin/content_controller_spec.rb:387 # Admin::ContentController with admin connection it should behave like new action publishing a draft copy of a published article deletes the draft
rspec ./spec/controllers/admin/content_controller_spec.rb:401 # Admin::ContentController with admin connection it should behave like new action saving a published article as draft leaves the original published
rspec ./spec/controllers/admin/content_controller_spec.rb:406 # Admin::ContentController with admin connection it should behave like new action saving a published article as draft leaves the original as is
rspec ./spec/controllers/admin/content_controller_spec.rb:411 # Admin::ContentController with admin connection it should behave like new action saving a published article as draft redirects to the index
rspec ./spec/controllers/admin/content_controller_spec.rb:415 # Admin::ContentController with admin connection it should behave like new action saving a published article as draft creates a draft
rspec ./spec/controllers/admin/content_controller_spec.rb:428 # Admin::ContentController with admin connection it should behave like new action with an unrelated draft in the database saving new article as draft leaves the original draft in existence
rspec ./spec/controllers/admin/content_controller_spec.rb:441 # Admin::ContentController with admin connection it should behave like destroy action should_not destroy article by get
rspec ./spec/controllers/admin/content_controller_spec.rb:451 # Admin::ContentController with admin connection it should behave like destroy action should destroy article by post
rspec ./spec/controllers/admin/content_controller_spec.rb:87 # Admin::ContentController with admin connection it should behave like autosave action first time for a new article should save new article with draft status and no parent article
rspec ./spec/controllers/admin/content_controller_spec.rb:111 # Admin::ContentController with admin connection it should behave like autosave action second time for a new article should save the same article with draft status and no parent article
rspec ./spec/controllers/admin/content_controller_spec.rb:138 # Admin::ContentController with admin connection it should behave like autosave action for a published article should create a draft article with proper attributes and existing article as a parent
rspec ./spec/controllers/admin/content_controller_spec.rb:150 # Admin::ContentController with admin connection it should behave like autosave action for a published article should not create another draft article with parent_id if article has already a draft associated
rspec ./spec/controllers/admin/content_controller_spec.rb:158 # Admin::ContentController with admin connection it should behave like autosave action for a published article should create a draft with the same permalink even if the title has changed
rspec ./spec/controllers/admin/content_controller_spec.rb:175 # Admin::ContentController with admin connection it should behave like autosave action with an unrelated draft in the database leaves the original draft in existence
rspec ./spec/controllers/admin/content_controller_spec.rb:486 # Admin::ContentController with admin connection edit action should edit article
rspec ./spec/controllers/admin/content_controller_spec.rb:495 # Admin::ContentController with admin connection edit action should update article by edit action
rspec ./spec/controllers/admin/content_controller_spec.rb:517 # Admin::ContentController with admin connection edit action should allow updating body_and_extended
rspec ./spec/controllers/admin/content_controller_spec.rb:528 # Admin::ContentController with admin connection edit action should delete draft about this article if update
rspec ./spec/controllers/admin/content_controller_spec.rb:537 # Admin::ContentController with admin connection edit action should delete all draft about this article if update not happen but why not
rspec ./spec/controllers/admin/content_controller_spec.rb:551 # Admin::ContentController with admin connection resource_add action should add resource
rspec ./spec/controllers/admin/content_controller_spec.rb:569 # Admin::ContentController with admin connection resource_remove action should remove resource
rspec ./spec/controllers/admin/content_controller_spec.rb:591 # Admin::ContentController with admin connection auto_complete_for_article_keywords action should return foo for keywords fo
rspec ./spec/controllers/admin/content_controller_spec.rb:597 # Admin::ContentController with admin connection auto_complete_for_article_keywords action should return nothing for hello
rspec ./spec/controllers/admin/content_controller_spec.rb:603 # Admin::ContentController with admin connection auto_complete_for_article_keywords action should return bar and bazz for ba keyword
rspec ./spec/controllers/admin/content_controller_spec.rb:9 # Admin::ContentController with publisher connection it should behave like index action should render template index
rspec ./spec/controllers/admin/content_controller_spec.rb:14 # Admin::ContentController with publisher connection it should behave like index action should see all published in index
rspec ./spec/controllers/admin/content_controller_spec.rb:20 # Admin::ContentController with publisher connection it should behave like index action should restrict only by searchstring
rspec ./spec/controllers/admin/content_controller_spec.rb:28 # Admin::ContentController with publisher connection it should behave like index action should restrict by searchstring and published_at
rspec ./spec/controllers/admin/content_controller_spec.rb:36 # Admin::ContentController with publisher connection it should behave like index action should restrict to drafts
rspec ./spec/controllers/admin/content_controller_spec.rb:44 # Admin::ContentController with publisher connection it should behave like index action should restrict to publication pending articles
rspec ./spec/controllers/admin/content_controller_spec.rb:52 # Admin::ContentController with publisher connection it should behave like index action should restrict to withdrawn articles
rspec ./spec/controllers/admin/content_controller_spec.rb:60 # Admin::ContentController with publisher connection it should behave like index action should restrict to withdrawn articles
rspec ./spec/controllers/admin/content_controller_spec.rb:68 # Admin::ContentController with publisher connection it should behave like index action should restrict to published articles
rspec ./spec/controllers/admin/content_controller_spec.rb:75 # Admin::ContentController with publisher connection it should behave like index action should fallback to default behavior
rspec ./spec/controllers/admin/content_controller_spec.rb:233 # Admin::ContentController with publisher connection it should behave like new action should create article with no comments
rspec ./spec/controllers/admin/content_controller_spec.rb:241 # Admin::ContentController with publisher connection it should behave like new action should create a published article with a redirect
rspec ./spec/controllers/admin/content_controller_spec.rb:246 # Admin::ContentController with publisher connection it should behave like new action should create a draft article without a redirect
rspec ./spec/controllers/admin/content_controller_spec.rb:251 # Admin::ContentController with publisher connection it should behave like new action should create an unpublished article without a redirect
rspec ./spec/controllers/admin/content_controller_spec.rb:256 # Admin::ContentController with publisher connection it should behave like new action should create an article published in the future without a redirect
rspec ./spec/controllers/admin/content_controller_spec.rb:261 # Admin::ContentController with publisher connection it should behave like new action should create article with no pings
rspec ./spec/controllers/admin/content_controller_spec.rb:268 # Admin::ContentController with publisher connection it should behave like new action should create an article linked to the current user
rspec ./spec/controllers/admin/content_controller_spec.rb:274 # Admin::ContentController with publisher connection it should behave like new action should create new published article
rspec ./spec/controllers/admin/content_controller_spec.rb:280 # Admin::ContentController with publisher connection it should behave like new action should redirect to show
rspec ./spec/controllers/admin/content_controller_spec.rb:285 # Admin::ContentController with publisher connection it should behave like new action should send notifications on create
rspec ./spec/controllers/admin/content_controller_spec.rb:302 # Admin::ContentController with publisher connection it should behave like new action should create an article in a category
rspec ./spec/controllers/admin/content_controller_spec.rb:309 # Admin::ContentController with publisher connection it should behave like new action should create an article with tags
rspec ./spec/controllers/admin/content_controller_spec.rb:315 # Admin::ContentController with publisher connection it should behave like new action should create article in future
rspec ./spec/controllers/admin/content_controller_spec.rb:326 # Admin::ContentController with publisher connection it should behave like new action should correctly interpret time zone in :published_at
rspec ./spec/controllers/admin/content_controller_spec.rb:332 # Admin::ContentController with publisher connection it should behave like new action should respect "GMT+0000 (UTC)" in :published_at
rspec ./spec/controllers/admin/content_controller_spec.rb:338 # Admin::ContentController with publisher connection it should behave like new action should create a filtered article
rspec ./spec/controllers/admin/content_controller_spec.rb:211 # Admin::ContentController with publisher connection it should behave like new action GET renders the 'new' template
rspec ./spec/controllers/admin/content_controller_spec.rb:218 # Admin::ContentController with publisher connection it should behave like new action GET correctly converts multi-word tags
rspec ./spec/controllers/admin/content_controller_spec.rb:361 # Admin::ContentController with publisher connection it should behave like new action publishing a published article with an autosaved draft updates the original
rspec ./spec/controllers/admin/content_controller_spec.rb:367 # Admin::ContentController with publisher connection it should behave like new action publishing a published article with an autosaved draft deletes the draft
rspec ./spec/controllers/admin/content_controller_spec.rb:381 # Admin::ContentController with publisher connection it should behave like new action publishing a draft copy of a published article updates the original
rspec ./spec/controllers/admin/content_controller_spec.rb:387 # Admin::ContentController with publisher connection it should behave like new action publishing a draft copy of a published article deletes the draft
rspec ./spec/controllers/admin/content_controller_spec.rb:401 # Admin::ContentController with publisher connection it should behave like new action saving a published article as draft leaves the original published
rspec ./spec/controllers/admin/content_controller_spec.rb:406 # Admin::ContentController with publisher connection it should behave like new action saving a published article as draft leaves the original as is
rspec ./spec/controllers/admin/content_controller_spec.rb:411 # Admin::ContentController with publisher connection it should behave like new action saving a published article as draft redirects to the index
rspec ./spec/controllers/admin/content_controller_spec.rb:415 # Admin::ContentController with publisher connection it should behave like new action saving a published article as draft creates a draft
rspec ./spec/controllers/admin/content_controller_spec.rb:428 # Admin::ContentController with publisher connection it should behave like new action with an unrelated draft in the database saving new article as draft leaves the original draft in existence
rspec ./spec/controllers/admin/content_controller_spec.rb:441 # Admin::ContentController with publisher connection it should behave like destroy action should_not destroy article by get
rspec ./spec/controllers/admin/content_controller_spec.rb:451 # Admin::ContentController with publisher connection it should behave like destroy action should destroy article by post
rspec ./spec/controllers/admin/content_controller_spec.rb:627 # Admin::ContentController with publisher connection edit action should redirect if edit article doesn't his
rspec ./spec/controllers/admin/content_controller_spec.rb:632 # Admin::ContentController with publisher connection edit action should edit article
rspec ./spec/controllers/admin/content_controller_spec.rb:639 # Admin::ContentController with publisher connection edit action should update article by edit action
rspec ./spec/controllers/admin/content_controller_spec.rb:664 # Admin::ContentController with publisher connection destroy action can be access should redirect when want destroy article
rspec ./spec/controllers/admin/users_controller_spec.rb:13 # Admin::UsersController rough port of the old functional test  when you are admin test_index
rspec ./spec/controllers/admin/users_controller_spec.rb:19 # Admin::UsersController rough port of the old functional test  when you are admin test_new
rspec ./spec/controllers/admin/users_controller_spec.rb:68 # Admin::UsersController rough port of the old functional test  when you are admin test_destroy
rspec ./spec/controllers/admin/users_controller_spec.rb:32 # Admin::UsersController rough port of the old functional test  when you are admin#EDIT action with POST request should redirect to index
rspec ./spec/controllers/admin/users_controller_spec.rb:42 # Admin::UsersController rough port of the old functional test  when you are admin#EDIT action with GET request with no id params it should behave like edit admin render should render template edit
rspec ./spec/controllers/admin/users_controller_spec.rb:46 # Admin::UsersController rough port of the old functional test  when you are admin#EDIT action with GET request with no id params it should behave like edit admin render should assigns tobi user
rspec ./spec/controllers/admin/users_controller_spec.rb:42 # Admin::UsersController rough port of the old functional test  when you are admin#EDIT action with GET request with id params it should behave like edit admin render should render template edit
rspec ./spec/controllers/admin/users_controller_spec.rb:46 # Admin::UsersController rough port of the old functional test  when you are admin#EDIT action with GET request with id params it should behave like edit admin render should assigns tobi user
rspec ./spec/controllers/admin/users_controller_spec.rb:91 # Admin::UsersController rough port of the old functional test when you are not admin don't see the list of user
rspec ./spec/controllers/admin/users_controller_spec.rb:108 # Admin::UsersController rough port of the old functional test when you are not admin EDIT Action try update another user should redirect to login
rspec ./spec/controllers/admin/users_controller_spec.rb:112 # Admin::UsersController rough port of the old functional test when you are not admin EDIT Action try update another user should not change user profile
rspec ./spec/controllers/admin/redirects_controller_spec.rb:24 # Admin::RedirectsController test_create
rspec ./spec/controllers/admin/redirects_controller_spec.rb:32 # Admin::RedirectsController test_create with empty from path
rspec ./spec/controllers/admin/redirects_controller_spec.rb:52 # Admin::RedirectsController test_update
rspec ./spec/controllers/admin/redirects_controller_spec.rb:19 # Admin::RedirectsController#index should display index with redirects
rspec ./spec/controllers/admin/redirects_controller_spec.rb:45 # Admin::RedirectsController#edit should render new template with valid redirect
rspec ./spec/controllers/admin/redirects_controller_spec.rb:68 # Admin::RedirectsController test_destroy with GET should render destroy template
rspec ./spec/controllers/admin/redirects_controller_spec.rb:79 # Admin::RedirectsController test_destroy with POST should redirect to index
rspec ./spec/controllers/admin/redirects_controller_spec.rb:83 # Admin::RedirectsController test_destroy with POST should have no more redirects
rspec ./spec/controllers/admin/cache_controller_spec.rb:19 # Admin::CacheController test_index should render template index
rspec ./spec/controllers/admin/profiles_controller_spec.rb:6 # Admin::ProfilesController#index should render index
rspec ./spec/controllers/admin/profiles_controller_spec.rb:19 # Admin::ProfilesController successful POST to index redirects to profile page
rspec ./spec/controllers/admin/textfilters_controller_spec.rb:7 # Admin::TextfiltersController macro help action should render success
rspec ./spec/controllers/admin/categories_controller_spec.rb:14 # Admin::CategoriesController test_index
rspec ./spec/controllers/admin/categories_controller_spec.rb:37 # Admin::CategoriesController test_update
rspec ./spec/controllers/admin/categories_controller_spec.rb:55 # Admin::CategoriesController test_destroy with POST
rspec ./spec/controllers/admin/categories_controller_spec.rb:24 # Admin::CategoriesController test_edit should render template new
rspec ./spec/controllers/admin/categories_controller_spec.rb:30 # Admin::CategoriesController test_edit should have valid category
rspec ./spec/controllers/admin/categories_controller_spec.rb:49 # Admin::CategoriesController test_destroy with GET should render destroy template
rspec ./spec/controllers/admin/seo_controller_spec.rb:19 # Admin::SeoController#index should render index
rspec ./spec/controllers/admin/seo_controller_spec.rb:29 # Admin::SeoController#permalinks should render permalinks
rspec ./spec/controllers/admin/seo_controller_spec.rb:39 # Admin::SeoController#titles should render titles
rspec ./spec/controllers/admin/seo_controller_spec.rb:52 # Admin::SeoController update action should success
rspec ./spec/controllers/admin/seo_controller_spec.rb:57 # Admin::SeoController update action should not save blog with bad permalink format
rspec ./spec/controllers/admin/sidebar_controller_spec.rb:15 # Admin::SidebarController rendering test_index
rspec ./spec/controllers/admin/dashboard_controller_spec.rb:16 # Admin::DashboardController test index should render the index template
rspec ./spec/controllers/admin/post_types_controller_spec.rb:13 # Admin::PostTypesController index shoudld redirect to new
rspec ./spec/controllers/admin/post_types_controller_spec.rb:18 # Admin::PostTypesController test_create
rspec ./spec/controllers/admin/post_types_controller_spec.rb:64 # Admin::PostTypesController test_destroy with POST
rspec ./spec/controllers/admin/post_types_controller_spec.rb:33 # Admin::PostTypesController test_new should render template new
rspec ./spec/controllers/admin/post_types_controller_spec.rb:40 # Admin::PostTypesController test_edit should render template new
rspec ./spec/controllers/admin/post_types_controller_spec.rb:45 # Admin::PostTypesController test_edit test_update
rspec ./spec/controllers/admin/post_types_controller_spec.rb:58 # Admin::PostTypesController test_destroy with GET should render destroy template
rspec ./spec/controllers/admin/themes_controller_spec.rb:25 # Admin::ThemesController redirects to :index after the :switchto action
rspec ./spec/controllers/admin/themes_controller_spec.rb:30 # Admin::ThemesController returns succes for the :preview action
rspec ./spec/controllers/admin/themes_controller_spec.rb:19 # Admin::ThemesController test index assigns @themes for the :index action
rspec ./spec/controllers/categories_controller_spec.rb:18 # CategoriesController /index normally 
rspec ./spec/controllers/categories_controller_spec.rb:19 # CategoriesController /index normally 
rspec ./spec/controllers/categories_controller_spec.rb:20 # CategoriesController /index normally 
rspec ./spec/controllers/categories_controller_spec.rb:25 # CategoriesController /index normally when rendered 
rspec ./spec/controllers/categories_controller_spec.rb:30 # CategoriesController /index if :index template exists should render :index
rspec ./spec/controllers/categories_controller_spec.rb:57 # CategoriesController#show should be successful
rspec ./spec/controllers/categories_controller_spec.rb:62 # CategoriesController#show should render :show by default
rspec ./spec/controllers/categories_controller_spec.rb:70 # CategoriesController#show should fall back to rendering articles/index
rspec ./spec/controllers/categories_controller_spec.rb:77 # CategoriesController#show should render personal when template exists
rspec ./spec/controllers/categories_controller_spec.rb:85 # CategoriesController#show should show only published articles
rspec ./spec/controllers/categories_controller_spec.rb:90 # CategoriesController#show should set the page title to "Category Personal"
rspec ./spec/controllers/categories_controller_spec.rb:104 # CategoriesController#show should render the atom feed for /articles/category/personal.atom
rspec ./spec/controllers/categories_controller_spec.rb:110 # CategoriesController#show should render the rss feed for /articles/category/personal.rss
rspec ./spec/controllers/categories_controller_spec.rb:98 # CategoriesController#show when rendered should have a canonical URL
rspec ./spec/controllers/categories_controller_spec.rb:135 # CategoriesController empty category life-on-mars should redirect to home when the category is empty
rspec ./spec/controllers/categories_controller_spec.rb:147 # CategoriesController password protected article should be password protected when shown in category
rspec ./spec/controllers/categories_controller_spec.rb:163 # CategoriesController SEO Options category without meta keywords and activated options (use_meta_keyword ON) should not have meta keywords
rspec ./spec/controllers/categories_controller_spec.rb:171 # CategoriesController SEO Options category with keywords and activated option (use_meta_keyword ON) should have meta keywords
rspec ./spec/controllers/categories_controller_spec.rb:176 # CategoriesController SEO Options category with meta keywords and deactivated options (use_meta_keyword off) should not have meta keywords
rspec ./spec/controllers/categories_controller_spec.rb:181 # CategoriesController SEO Options with unindex_categories (set ON), should have rel nofollow
rspec ./spec/controllers/categories_controller_spec.rb:186 # CategoriesController SEO Options without unindex_categories (set OFF), should not have rel nofollow
rspec ./spec/controllers/grouping_controller_spec.rb:6 # GroupingController should set meta robots to noindex follow when tag controller and unindex_tags options is true
rspec ./spec/controllers/grouping_controller_spec.rb:11 # GroupingController should set meta robots to noindex follow when category controller and unindex_categories optinos is true
rspec ./spec/controllers/grouping_controller_spec.rb:16 # GroupingController should set meta robots to noindex follow when page params not blank and unindex_tags and unindex_categories are set to false
rspec ./spec/controllers/grouping_controller_spec.rb:23 # GroupingController should not set meta robots to noindex follow when tag controller and unindex_tags options is false and page params nil
rspec ./spec/controllers/grouping_controller_spec.rb:28 # GroupingController should not set meta robots to noindex follow when categoriy controller and unindex_categories options is false and page params nil
rspec ./spec/controllers/setup_controller_spec.rb:66 # SetupController when a blog is configured and has some users GET setup 
rspec ./spec/controllers/setup_controller_spec.rb:75 # SetupController when a blog is configured and has some users POST setup 
rspec ./spec/controllers/setup_controller_spec.rb:77 # SetupController when a blog is configured and has some users POST setup should not initialize blog and users
rspec ./spec/controllers/authors_controller_spec.rb:15 # AuthorsController#show as html renders the :show template
rspec ./spec/controllers/authors_controller_spec.rb:19 # AuthorsController#show as html assigns author
rspec ./spec/controllers/authors_controller_spec.rb:23 # AuthorsController#show as html assigns articles as published articles
rspec ./spec/controllers/authors_controller_spec.rb:30 # AuthorsController#show as html when rendered has a link to the rss feed
rspec ./spec/controllers/authors_controller_spec.rb:34 # AuthorsController#show as html when rendered has a link to the atom feed
rspec ./spec/controllers/authors_controller_spec.rb:45 # AuthorsController#show as an atom feed assigns articles as published articles
rspec ./spec/controllers/authors_controller_spec.rb:49 # AuthorsController#show as an atom feed renders the atom template
rspec ./spec/controllers/authors_controller_spec.rb:54 # AuthorsController#show as an atom feed does not render layout
rspec ./spec/controllers/authors_controller_spec.rb:64 # AuthorsController#show as an rss feed assigns articles as published articles
rspec ./spec/controllers/authors_controller_spec.rb:68 # AuthorsController#show as an rss feed renders the rss template
rspec ./spec/controllers/authors_controller_spec.rb:73 # AuthorsController#show as an rss feed does not render layout
rspec ./spec/controllers/authors_controller_spec.rb:83 # AuthorsController SEO options should never have meta keywords with deactivated option
rspec ./spec/controllers/authors_controller_spec.rb:90 # AuthorsController SEO options should never have meta keywords with deactivated option
rspec ./spec/controllers/accounts_controller_spec.rb:5 # AccountsController A successful login with 'Remember me' checked should not cause password to change
rspec ./spec/controllers/accounts_controller_spec.rb:25 # AccountsController A successfully authenticated login session gets a user
rspec ./spec/controllers/accounts_controller_spec.rb:30 # AccountsController A successfully authenticated login sets typo_user_profile cookie
rspec ./spec/controllers/accounts_controller_spec.rb:35 # AccountsController A successfully authenticated login redirects to /bogus/location
rspec ./spec/controllers/accounts_controller_spec.rb:41 # AccountsController A successfully authenticated login redirects to /admin if no return
rspec ./spec/controllers/accounts_controller_spec.rb:46 # AccountsController A successfully authenticated login redirects to /admin if no return and you are logged in
rspec ./spec/controllers/accounts_controller_spec.rb:52 # AccountsController A successfully authenticated login should redirect to signup if no users
rspec ./spec/controllers/accounts_controller_spec.rb:70 # AccountsController User is inactive no user id goes in the session
rspec ./spec/controllers/accounts_controller_spec.rb:75 # AccountsController User is inactive login should == "inactive"
rspec ./spec/controllers/accounts_controller_spec.rb:80 # AccountsController User is inactive typo_user_profile cookie should be blank
rspec ./spec/controllers/accounts_controller_spec.rb:85 # AccountsController User is inactive should render login action
rspec ./spec/controllers/accounts_controller_spec.rb:102 # AccountsController Login with nil user and password should render login action
rspec ./spec/controllers/accounts_controller_spec.rb:119 # AccountsController Login gets the wrong password no user in goes in the session
rspec ./spec/controllers/accounts_controller_spec.rb:124 # AccountsController Login gets the wrong password login should == "bob"
rspec ./spec/controllers/accounts_controller_spec.rb:129 # AccountsController Login gets the wrong password typo_user_profile cookie should be blank
rspec ./spec/controllers/accounts_controller_spec.rb:134 # AccountsController Login gets the wrong password should render login action
rspec ./spec/controllers/accounts_controller_spec.rb:141 # AccountsController GET /index should redirect to login
rspec ./spec/controllers/accounts_controller_spec.rb:148 # AccountsController GET /index should redirect to signup
rspec ./spec/controllers/accounts_controller_spec.rb:157 # AccountsController GET /login should render action :login
rspec ./spec/controllers/accounts_controller_spec.rb:172 # AccountsController GET /login with 0 existing users should render action :signup
rspec ./spec/controllers/accounts_controller_spec.rb:178 # AccountsController GET /login with 0 existing users should render :signup
rspec ./spec/controllers/accounts_controller_spec.rb:191 # AccountsController with >0 existing user and allow_signup = 0 GET signup should redirect to login
rspec ./spec/controllers/accounts_controller_spec.rb:198 # AccountsController with >0 existing user and allow_signup = 0 POST signup without allow_signup should redirect to login
rspec ./spec/controllers/accounts_controller_spec.rb:212 # AccountsController with > 0 existing user and allow_signup = 1 GET signup with allow_signup should redirect to login
rspec ./spec/controllers/accounts_controller_spec.rb:219 # AccountsController with > 0 existing user and allow_signup = 1 POST signup with allow_signup should redirect to login
rspec ./spec/controllers/accounts_controller_spec.rb:235 # AccountsController GET signup with 0 existing users sets @user
rspec ./spec/controllers/accounts_controller_spec.rb:240 # AccountsController GET signup with 0 existing users renders action signup
rspec ./spec/controllers/accounts_controller_spec.rb:301 # AccountsController POST signup with 0 existing users creates and saves a user
rspec ./spec/controllers/accounts_controller_spec.rb:308 # AccountsController POST signup with 0 existing users redirects to /account/confirm
rspec ./spec/controllers/accounts_controller_spec.rb:313 # AccountsController POST signup with 0 existing users session gets a user
rspec ./spec/controllers/accounts_controller_spec.rb:338 # AccountsController User is logged in trying to log in once again redirects to admin/dashboard/index
rspec ./spec/controllers/accounts_controller_spec.rb:348 # AccountsController User is logged in when logging out deletes the session[:user_id]
rspec ./spec/controllers/accounts_controller_spec.rb:352 # AccountsController User is logged in when logging out deletes the session[:user]
rspec ./spec/controllers/accounts_controller_spec.rb:356 # AccountsController User is logged in when logging out redirects to the login action
rspec ./spec/controllers/accounts_controller_spec.rb:360 # AccountsController User is logged in when logging out deletes cookies containing credentials
rspec ./spec/controllers/accounts_controller_spec.rb:377 # AccountsController when user has lost their password when GET 
rspec ./spec/controllers/accounts_controller_spec.rb:384 # AccountsController when user has lost their password when a known login or email is POSTed 
rspec ./spec/controllers/accounts_controller_spec.rb:392 # AccountsController when user has lost their password when an unknown login or email is POSTed 
rspec ./spec/controllers/accounts_controller_spec.rb:393 # AccountsController when user has lost their password when an unknown login or email is POSTed should display an error
rspec ./spec/controllers/comments_controller_spec.rb:46 # CommentsController#create should redirect to the article
rspec ./spec/controllers/comments_controller_spec.rb:16 # CommentsController#create Basic comment creation should assign the new comment to @comment
rspec ./spec/controllers/comments_controller_spec.rb:20 # CommentsController#create Basic comment creation should assign the article to @article
rspec ./spec/controllers/comments_controller_spec.rb:24 # CommentsController#create Basic comment creation should save the comment
rspec ./spec/controllers/comments_controller_spec.rb:28 # CommentsController#create Basic comment creation should set the author
rspec ./spec/controllers/comments_controller_spec.rb:32 # CommentsController#create Basic comment creation should set an author cookie
rspec ./spec/controllers/comments_controller_spec.rb:36 # CommentsController#create Basic comment creation should set a gravatar_id cookie
rspec ./spec/controllers/comments_controller_spec.rb:40 # CommentsController#create Basic comment creation should set a url cookie
rspec ./spec/controllers/comments_controller_spec.rb:55 # CommentsController AJAX creation should render the comment partial
rspec ./spec/controllers/comments_controller_spec.rb:64 # CommentsController#index scoped index GET 2007/10/11/slug/comments should redirect to /2007/10/11/slug#comments
rspec ./spec/controllers/comments_controller_spec.rb:73 # CommentsController#index without format should be successful
rspec ./spec/controllers/comments_controller_spec.rb:78 # CommentsController#index without format should not bother fetching any comments 
rspec ./spec/controllers/comments_controller_spec.rb:94 # CommentsController#index with :format => 'atom' without article is succesful
rspec ./spec/controllers/comments_controller_spec.rb:98 # CommentsController#index with :format => 'atom' without article passes the comments to the template
rspec ./spec/controllers/comments_controller_spec.rb:102 # CommentsController#index with :format => 'atom' without article should return an atom feed
rspec ./spec/controllers/comments_controller_spec.rb:108 # CommentsController#index with :format => 'atom' with an article should return an atom feed
rspec ./spec/controllers/comments_controller_spec.rb:123 # CommentsController#index with :format => 'rss' without article is succesful
rspec ./spec/controllers/comments_controller_spec.rb:127 # CommentsController#index with :format => 'rss' without article passes the comments to the template
rspec ./spec/controllers/comments_controller_spec.rb:131 # CommentsController#index with :format => 'rss' without article should return an rss feed
rspec ./spec/controllers/comments_controller_spec.rb:137 # CommentsController#index with :format => 'rss' with article should return an rss feed
Coverage report generated for RSpec to /home/ec2-user/environment/typo/coverage. 11688 / 15013 LOC (77.85%) covered.
